
Display_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005884  08005884  00006884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b0  080058b0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080058b0  080058b0  000068b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058b8  080058b8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080058b8  080058b8  000068b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058c0  080058c0  000068c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080058c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  2000000c  080058d0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  080058d0  0000767c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131ab  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e8  00000000  00000000  0001a1e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0001d3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d52  00000000  00000000  0001e528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9c0  00000000  00000000  0001f27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173f0  00000000  00000000  00039c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e2d  00000000  00000000  0005102a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2e57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004808  00000000  00000000  000e2e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e76a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800586c 	.word	0x0800586c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800586c 	.word	0x0800586c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
 80004d0:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	683a      	ldr	r2, [r7, #0]
 80004d6:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	7e3a      	ldrb	r2, [r7, #24]
 80004dc:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	68ba      	ldr	r2, [r7, #8]
 80004e2:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	605a      	str	r2, [r3, #4]
    endSPI();
 80004ea:	68f8      	ldr	r0, [r7, #12]
 80004ec:	f000 f839 	bl	8000562 <_ZN7MCP25156endSPIEv>
}
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4618      	mov	r0, r3
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	460b      	mov	r3, r1
 8000504:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6818      	ldr	r0, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	1cf9      	adds	r1, r7, #3
 8000510:	2201      	movs	r2, #1
 8000512:	f003 f864 	bl	80035de <HAL_SPI_Transmit>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b084      	sub	sp, #16
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6818      	ldr	r0, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	f107 010f 	add.w	r1, r7, #15
 8000532:	2201      	movs	r2, #1
 8000534:	f003 f997 	bl	8003866 <HAL_SPI_Receive>
	return retVal;
 8000538:	7bfb      	ldrb	r3, [r7, #15]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6898      	ldr	r0, [r3, #8]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	7b1b      	ldrb	r3, [r3, #12]
 8000552:	2200      	movs	r2, #0
 8000554:	4619      	mov	r1, r3
 8000556:	f002 fa53 	bl	8002a00 <HAL_GPIO_WritePin>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6898      	ldr	r0, [r3, #8]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7b1b      	ldrb	r3, [r3, #12]
 8000572:	2201      	movs	r2, #1
 8000574:	4619      	mov	r1, r3
 8000576:	f002 fa43 	bl	8002a00 <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	@ 0x30
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	startSPI();
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff ffd8 	bl	8000542 <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 8000592:	21c0      	movs	r1, #192	@ 0xc0
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f7ff ffb0 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
	endSPI();
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f7ff ffe1 	bl	8000562 <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	220e      	movs	r2, #14
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f005 f932 	bl	8005812 <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 80005ae:	f107 0214 	add.w	r2, r7, #20
 80005b2:	230e      	movs	r3, #14
 80005b4:	2130      	movs	r1, #48	@ 0x30
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 f8ec 	bl	8000794 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 80005bc:	f107 0214 	add.w	r2, r7, #20
 80005c0:	230e      	movs	r3, #14
 80005c2:	2140      	movs	r1, #64	@ 0x40
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 f8e5 	bl	8000794 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 80005ca:	f107 0214 	add.w	r2, r7, #20
 80005ce:	230e      	movs	r3, #14
 80005d0:	2150      	movs	r1, #80	@ 0x50
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 f8de 	bl	8000794 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2160      	movs	r1, #96	@ 0x60
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f8b9 	bl	8000754 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2170      	movs	r1, #112	@ 0x70
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 f8b4 	bl	8000754 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 80005ec:	22a3      	movs	r2, #163	@ 0xa3
 80005ee:	212b      	movs	r1, #43	@ 0x2b
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f8af 	bl	8000754 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 80005f6:	2304      	movs	r3, #4
 80005f8:	2267      	movs	r2, #103	@ 0x67
 80005fa:	2160      	movs	r1, #96	@ 0x60
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f8f8 	bl	80007f2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 8000602:	2301      	movs	r3, #1
 8000604:	2267      	movs	r2, #103	@ 0x67
 8000606:	2170      	movs	r1, #112	@ 0x70
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f8f2 	bl	80007f2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 800060e:	4a29      	ldr	r2, [pc, #164]	@ (80006b4 <_ZN7MCP25155resetEv+0x130>)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000618:	6018      	str	r0, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 800061e:	2300      	movs	r3, #0
 8000620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000622:	e01e      	b.n	8000662 <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 8000624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000626:	2b01      	cmp	r3, #1
 8000628:	bf0c      	ite	eq
 800062a:	2301      	moveq	r3, #1
 800062c:	2300      	movne	r3, #0
 800062e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 8000632:	f107 020c 	add.w	r2, r7, #12
 8000636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000638:	4413      	add	r3, r2
 800063a:	7819      	ldrb	r1, [r3, #0]
 800063c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8000640:	2300      	movs	r3, #0
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 fbcc 	bl	8000de0 <_ZN7MCP25159setFilterENS_3RXFEbm>
 8000648:	4603      	mov	r3, r0
 800064a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 800064e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <_ZN7MCP25155resetEv+0xd8>
            return result;
 8000656:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800065a:	e027      	b.n	80006ac <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 800065c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800065e:	3301      	adds	r3, #1
 8000660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000664:	2b05      	cmp	r3, #5
 8000666:	dddd      	ble.n	8000624 <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8000668:	2300      	movs	r3, #0
 800066a:	723b      	strb	r3, [r7, #8]
 800066c:	2301      	movs	r3, #1
 800066e:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000674:	e016      	b.n	80006a4 <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8000676:	f107 0208 	add.w	r2, r7, #8
 800067a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800067c:	4413      	add	r3, r2
 800067e:	7819      	ldrb	r1, [r3, #0]
 8000680:	2300      	movs	r3, #0
 8000682:	2201      	movs	r2, #1
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 fb77 	bl	8000d78 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 800068a:	4603      	mov	r3, r0
 800068c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8000690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <_ZN7MCP25155resetEv+0x11a>
            return result;
 8000698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800069c:	e006      	b.n	80006ac <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 800069e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006a0:	3301      	adds	r3, #1
 80006a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	dde5      	ble.n	8000676 <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3730      	adds	r7, #48	@ 0x30
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	08005884 	.word	0x08005884

080006b8 <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
    startSPI();
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ff3c 	bl	8000542 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 80006ca:	2103      	movs	r1, #3
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ff14 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ff0f 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff ff1e 	bl	800051e <_ZN7MCP25156SPI_RxEv>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
    endSPI();
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff3b 	bl	8000562 <_ZN7MCP25156endSPIEv>

    return ret;
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 80006f6:	b590      	push	{r4, r7, lr}
 80006f8:	b087      	sub	sp, #28
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	461a      	mov	r2, r3
 8000702:	460b      	mov	r3, r1
 8000704:	72fb      	strb	r3, [r7, #11]
 8000706:	4613      	mov	r3, r2
 8000708:	72bb      	strb	r3, [r7, #10]
    startSPI();
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f7ff ff19 	bl	8000542 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8000710:	2103      	movs	r1, #3
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f7ff fef1 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8000718:	7afb      	ldrb	r3, [r7, #11]
 800071a:	4619      	mov	r1, r3
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f7ff feec 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8000722:	2300      	movs	r3, #0
 8000724:	75fb      	strb	r3, [r7, #23]
 8000726:	e00a      	b.n	800073e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	18d4      	adds	r4, r2, r3
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f7ff fef5 	bl	800051e <_ZN7MCP25156SPI_RxEv>
 8000734:	4603      	mov	r3, r0
 8000736:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8000738:	7dfb      	ldrb	r3, [r7, #23]
 800073a:	3301      	adds	r3, #1
 800073c:	75fb      	strb	r3, [r7, #23]
 800073e:	7dfa      	ldrb	r2, [r7, #23]
 8000740:	7abb      	ldrb	r3, [r7, #10]
 8000742:	429a      	cmp	r2, r3
 8000744:	d3f0      	bcc.n	8000728 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8000746:	68f8      	ldr	r0, [r7, #12]
 8000748:	f7ff ff0b 	bl	8000562 <_ZN7MCP25156endSPIEv>
}
 800074c:	bf00      	nop
 800074e:	371c      	adds	r7, #28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd90      	pop	{r4, r7, pc}

08000754 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
 8000760:	4613      	mov	r3, r2
 8000762:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff feec 	bl	8000542 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 800076a:	2102      	movs	r1, #2
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fec4 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	4619      	mov	r1, r3
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff febf 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 800077c:	78bb      	ldrb	r3, [r7, #2]
 800077e:	4619      	mov	r1, r3
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff feba 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff feeb 	bl	8000562 <_ZN7MCP25156endSPIEv>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	461a      	mov	r2, r3
 80007a0:	460b      	mov	r3, r1
 80007a2:	72fb      	strb	r3, [r7, #11]
 80007a4:	4613      	mov	r3, r2
 80007a6:	72bb      	strb	r3, [r7, #10]
    startSPI();
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff feca 	bl	8000542 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 80007ae:	2102      	movs	r1, #2
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	f7ff fea2 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 80007b6:	7afb      	ldrb	r3, [r7, #11]
 80007b8:	4619      	mov	r1, r3
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	f7ff fe9d 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 80007c0:	2300      	movs	r3, #0
 80007c2:	75fb      	strb	r3, [r7, #23]
 80007c4:	e00a      	b.n	80007dc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4619      	mov	r1, r3
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f7ff fe92 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 80007d6:	7dfb      	ldrb	r3, [r7, #23]
 80007d8:	3301      	adds	r3, #1
 80007da:	75fb      	strb	r3, [r7, #23]
 80007dc:	7dfa      	ldrb	r2, [r7, #23]
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d3f0      	bcc.n	80007c6 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f7ff febc 	bl	8000562 <_ZN7MCP25156endSPIEv>
}
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	4608      	mov	r0, r1
 80007fc:	4611      	mov	r1, r2
 80007fe:	461a      	mov	r2, r3
 8000800:	4603      	mov	r3, r0
 8000802:	70fb      	strb	r3, [r7, #3]
 8000804:	460b      	mov	r3, r1
 8000806:	70bb      	strb	r3, [r7, #2]
 8000808:	4613      	mov	r3, r2
 800080a:	707b      	strb	r3, [r7, #1]
    startSPI();
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff fe98 	bl	8000542 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 8000812:	2105      	movs	r1, #5
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff fe70 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	4619      	mov	r1, r3
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff fe6b 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 8000824:	78bb      	ldrb	r3, [r7, #2]
 8000826:	4619      	mov	r1, r3
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff fe66 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 800082e:	787b      	ldrb	r3, [r7, #1]
 8000830:	4619      	mov	r1, r3
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff fe61 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff fe92 	bl	8000562 <_ZN7MCP25156endSPIEv>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b084      	sub	sp, #16
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
    startSPI();
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fe77 	bl	8000542 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 8000854:	21a0      	movs	r1, #160	@ 0xa0
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff fe4f 	bl	80004fa <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff fe5e 	bl	800051e <_ZN7MCP25156SPI_RxEv>
 8000862:	4603      	mov	r3, r0
 8000864:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f7ff fe7b 	bl	8000562 <_ZN7MCP25156endSPIEv>

    return i;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 800087e:	2180      	movs	r1, #128	@ 0x80
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f812 	bl	80008aa <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8000886:	4603      	mov	r3, r0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8000898:	2100      	movs	r1, #0
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f000 f805 	bl	80008aa <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 80008a0:	4603      	mov	r3, r0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	22e0      	movs	r2, #224	@ 0xe0
 80008ba:	210f      	movs	r1, #15
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff98 	bl	80007f2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 80008c2:	f001 fa45 	bl	8001d50 <HAL_GetTick>
 80008c6:	4603      	mov	r3, r0
 80008c8:	330a      	adds	r3, #10
 80008ca:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 80008cc:	2300      	movs	r3, #0
 80008ce:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 80008d0:	e013      	b.n	80008fa <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 80008d2:	210e      	movs	r1, #14
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff feef 	bl	80006b8 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 80008da:	4603      	mov	r3, r0
 80008dc:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	f023 031f 	bic.w	r3, r3, #31
 80008e4:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 80008e6:	7bfa      	ldrb	r2, [r7, #15]
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	bf0c      	ite	eq
 80008ee:	2301      	moveq	r3, #1
 80008f0:	2300      	movne	r3, #0
 80008f2:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 80008f4:	7dfb      	ldrb	r3, [r7, #23]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10b      	bne.n	8000912 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 80008fa:	f001 fa29 	bl	8001d50 <HAL_GetTick>
 80008fe:	4602      	mov	r2, r0
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	4293      	cmp	r3, r2
 8000904:	bf8c      	ite	hi
 8000906:	2301      	movhi	r3, #1
 8000908:	2300      	movls	r3, #0
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1e0      	bne.n	80008d2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 8000910:	e000      	b.n	8000914 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 8000912:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 8000914:	7dfb      	ldrb	r3, [r7, #23]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 800091e:	2301      	movs	r3, #1

}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]
 8000934:	4613      	mov	r3, r2
 8000936:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff9c 	bl	8000876 <_ZN7MCP251513setConfigModeEv>
 800093e:	4603      	mov	r3, r0
 8000940:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 8000942:	7afb      	ldrb	r3, [r7, #11]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 8000948:	7afb      	ldrb	r3, [r7, #11]
 800094a:	e1b5      	b.n	8000cb8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 800094c:	2301      	movs	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 8000950:	78bb      	ldrb	r3, [r7, #2]
 8000952:	2b02      	cmp	r3, #2
 8000954:	d009      	beq.n	800096a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 8000956:	2b02      	cmp	r3, #2
 8000958:	f300 8193 	bgt.w	8000c82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 800095c:	2b00      	cmp	r3, #0
 800095e:	f000 811f 	beq.w	8000ba0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 8000962:	2b01      	cmp	r3, #1
 8000964:	f000 808e 	beq.w	8000a84 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 8000968:	e18b      	b.n	8000c82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	f200 8085 	bhi.w	8000a7c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 8000972:	a201      	add	r2, pc, #4	@ (adr r2, 8000978 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 8000974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000978:	080009b9 	.word	0x080009b9
 800097c:	080009c7 	.word	0x080009c7
 8000980:	080009d5 	.word	0x080009d5
 8000984:	080009e3 	.word	0x080009e3
 8000988:	080009f1 	.word	0x080009f1
 800098c:	080009ff 	.word	0x080009ff
 8000990:	08000a0d 	.word	0x08000a0d
 8000994:	08000a1b 	.word	0x08000a1b
 8000998:	08000a7d 	.word	0x08000a7d
 800099c:	08000a7d 	.word	0x08000a7d
 80009a0:	08000a29 	.word	0x08000a29
 80009a4:	08000a37 	.word	0x08000a37
 80009a8:	08000a45 	.word	0x08000a45
 80009ac:	08000a53 	.word	0x08000a53
 80009b0:	08000a61 	.word	0x08000a61
 80009b4:	08000a6f 	.word	0x08000a6f
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 80009b8:	231f      	movs	r3, #31
 80009ba:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 80009bc:	23bf      	movs	r3, #191	@ 0xbf
 80009be:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 80009c0:	2387      	movs	r3, #135	@ 0x87
 80009c2:	733b      	strb	r3, [r7, #12]
            break;
 80009c4:	e05d      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 80009c6:	230f      	movs	r3, #15
 80009c8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 80009ca:	23bf      	movs	r3, #191	@ 0xbf
 80009cc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 80009ce:	2387      	movs	r3, #135	@ 0x87
 80009d0:	733b      	strb	r3, [r7, #12]
            break;
 80009d2:	e056      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 80009d4:	2307      	movs	r3, #7
 80009d6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 80009d8:	23bf      	movs	r3, #191	@ 0xbf
 80009da:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 80009dc:	2387      	movs	r3, #135	@ 0x87
 80009de:	733b      	strb	r3, [r7, #12]
            break;
 80009e0:	e04f      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 80009e2:	2307      	movs	r3, #7
 80009e4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 80009e6:	23a4      	movs	r3, #164	@ 0xa4
 80009e8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 80009ea:	2384      	movs	r3, #132	@ 0x84
 80009ec:	733b      	strb	r3, [r7, #12]
            break;
 80009ee:	e048      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 80009f0:	2347      	movs	r3, #71	@ 0x47
 80009f2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 80009f4:	23e2      	movs	r3, #226	@ 0xe2
 80009f6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 80009f8:	2385      	movs	r3, #133	@ 0x85
 80009fa:	733b      	strb	r3, [r7, #12]
            break;
 80009fc:	e041      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 80009fe:	2303      	movs	r3, #3
 8000a00:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 8000a02:	23bf      	movs	r3, #191	@ 0xbf
 8000a04:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8000a06:	2387      	movs	r3, #135	@ 0x87
 8000a08:	733b      	strb	r3, [r7, #12]
            break;
 8000a0a:	e03a      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8000a10:	23b4      	movs	r3, #180	@ 0xb4
 8000a12:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8000a14:	2386      	movs	r3, #134	@ 0x86
 8000a16:	733b      	strb	r3, [r7, #12]
            break;
 8000a18:	e033      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 8000a1e:	23bf      	movs	r3, #191	@ 0xbf
 8000a20:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 8000a22:	2387      	movs	r3, #135	@ 0x87
 8000a24:	733b      	strb	r3, [r7, #12]
            break;
 8000a26:	e02c      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 8000a2c:	23b4      	movs	r3, #180	@ 0xb4
 8000a2e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8000a30:	2386      	movs	r3, #134	@ 0x86
 8000a32:	733b      	strb	r3, [r7, #12]
            break;
 8000a34:	e025      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 8000a3a:	23b1      	movs	r3, #177	@ 0xb1
 8000a3c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 8000a3e:	2385      	movs	r3, #133	@ 0x85
 8000a40:	733b      	strb	r3, [r7, #12]
            break;
 8000a42:	e01e      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8000a48:	23b4      	movs	r3, #180	@ 0xb4
 8000a4a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 8000a4c:	2386      	movs	r3, #134	@ 0x86
 8000a4e:	733b      	strb	r3, [r7, #12]
            break;
 8000a50:	e017      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 8000a56:	23b1      	movs	r3, #177	@ 0xb1
 8000a58:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 8000a5a:	2385      	movs	r3, #133	@ 0x85
 8000a5c:	733b      	strb	r3, [r7, #12]
            break;
 8000a5e:	e010      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 8000a64:	2390      	movs	r3, #144	@ 0x90
 8000a66:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8000a68:	2382      	movs	r3, #130	@ 0x82
 8000a6a:	733b      	strb	r3, [r7, #12]
            break;
 8000a6c:	e009      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 8000a72:	2380      	movs	r3, #128	@ 0x80
 8000a74:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 8000a76:	2380      	movs	r3, #128	@ 0x80
 8000a78:	733b      	strb	r3, [r7, #12]
            break;
 8000a7a:	e002      	b.n	8000a82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]
            break;
 8000a80:	bf00      	nop
        }
        break;
 8000a82:	e101      	b.n	8000c88 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	2b0f      	cmp	r3, #15
 8000a88:	f200 8086 	bhi.w	8000b98 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 8000a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a94 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 8000a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a92:	bf00      	nop
 8000a94:	08000ad5 	.word	0x08000ad5
 8000a98:	08000ae3 	.word	0x08000ae3
 8000a9c:	08000af1 	.word	0x08000af1
 8000aa0:	08000b99 	.word	0x08000b99
 8000aa4:	08000aff 	.word	0x08000aff
 8000aa8:	08000b0d 	.word	0x08000b0d
 8000aac:	08000b1b 	.word	0x08000b1b
 8000ab0:	08000b29 	.word	0x08000b29
 8000ab4:	08000b37 	.word	0x08000b37
 8000ab8:	08000b99 	.word	0x08000b99
 8000abc:	08000b45 	.word	0x08000b45
 8000ac0:	08000b53 	.word	0x08000b53
 8000ac4:	08000b61 	.word	0x08000b61
 8000ac8:	08000b6f 	.word	0x08000b6f
 8000acc:	08000b7d 	.word	0x08000b7d
 8000ad0:	08000b8b 	.word	0x08000b8b
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8000ad4:	233f      	movs	r3, #63	@ 0x3f
 8000ad6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 8000ad8:	23ff      	movs	r3, #255	@ 0xff
 8000ada:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 8000adc:	2387      	movs	r3, #135	@ 0x87
 8000ade:	733b      	strb	r3, [r7, #12]
            break;
 8000ae0:	e05d      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 8000ae2:	231f      	movs	r3, #31
 8000ae4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 8000ae6:	23ff      	movs	r3, #255	@ 0xff
 8000ae8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 8000aea:	2387      	movs	r3, #135	@ 0x87
 8000aec:	733b      	strb	r3, [r7, #12]
            break;
 8000aee:	e056      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 8000af0:	230f      	movs	r3, #15
 8000af2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8000af4:	23ff      	movs	r3, #255	@ 0xff
 8000af6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8000af8:	2387      	movs	r3, #135	@ 0x87
 8000afa:	733b      	strb	r3, [r7, #12]
            break;
 8000afc:	e04f      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 8000afe:	234e      	movs	r3, #78	@ 0x4e
 8000b00:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 8000b02:	23f1      	movs	r3, #241	@ 0xf1
 8000b04:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 8000b06:	2385      	movs	r3, #133	@ 0x85
 8000b08:	733b      	strb	r3, [r7, #12]
            break;
 8000b0a:	e048      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8000b10:	23ff      	movs	r3, #255	@ 0xff
 8000b12:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8000b14:	2387      	movs	r3, #135	@ 0x87
 8000b16:	733b      	strb	r3, [r7, #12]
            break;
 8000b18:	e041      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 8000b1e:	23fa      	movs	r3, #250	@ 0xfa
 8000b20:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 8000b22:	2387      	movs	r3, #135	@ 0x87
 8000b24:	733b      	strb	r3, [r7, #12]
            break;
 8000b26:	e03a      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 8000b2c:	23ff      	movs	r3, #255	@ 0xff
 8000b2e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 8000b30:	2387      	movs	r3, #135	@ 0x87
 8000b32:	733b      	strb	r3, [r7, #12]
            break;
 8000b34:	e033      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 8000b36:	2303      	movs	r3, #3
 8000b38:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 8000b3a:	23be      	movs	r3, #190	@ 0xbe
 8000b3c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	733b      	strb	r3, [r7, #12]
            break;
 8000b42:	e02c      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 8000b44:	2303      	movs	r3, #3
 8000b46:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 8000b48:	23fa      	movs	r3, #250	@ 0xfa
 8000b4a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 8000b4c:	2387      	movs	r3, #135	@ 0x87
 8000b4e:	733b      	strb	r3, [r7, #12]
            break;
 8000b50:	e025      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 8000b52:	2303      	movs	r3, #3
 8000b54:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 8000b56:	23f0      	movs	r3, #240	@ 0xf0
 8000b58:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 8000b5a:	2386      	movs	r3, #134	@ 0x86
 8000b5c:	733b      	strb	r3, [r7, #12]
            break;
 8000b5e:	e01e      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 8000b64:	23fa      	movs	r3, #250	@ 0xfa
 8000b66:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 8000b68:	2387      	movs	r3, #135	@ 0x87
 8000b6a:	733b      	strb	r3, [r7, #12]
            break;
 8000b6c:	e017      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 8000b6e:	2341      	movs	r3, #65	@ 0x41
 8000b70:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 8000b72:	23f1      	movs	r3, #241	@ 0xf1
 8000b74:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 8000b76:	2385      	movs	r3, #133	@ 0x85
 8000b78:	733b      	strb	r3, [r7, #12]
            break;
 8000b7a:	e010      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 8000b80:	23f0      	movs	r3, #240	@ 0xf0
 8000b82:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 8000b84:	2386      	movs	r3, #134	@ 0x86
 8000b86:	733b      	strb	r3, [r7, #12]
            break;
 8000b88:	e009      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 8000b8e:	23d0      	movs	r3, #208	@ 0xd0
 8000b90:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 8000b92:	2382      	movs	r3, #130	@ 0x82
 8000b94:	733b      	strb	r3, [r7, #12]
            break;
 8000b96:	e002      	b.n	8000b9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]
            break;
 8000b9c:	bf00      	nop
        }
        break;
 8000b9e:	e073      	b.n	8000c88 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	2b0b      	cmp	r3, #11
 8000ba6:	d868      	bhi.n	8000c7a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 8000ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000be1 	.word	0x08000be1
 8000bb4:	08000bef 	.word	0x08000bef
 8000bb8:	08000bfd 	.word	0x08000bfd
 8000bbc:	08000c0b 	.word	0x08000c0b
 8000bc0:	08000c19 	.word	0x08000c19
 8000bc4:	08000c7b 	.word	0x08000c7b
 8000bc8:	08000c27 	.word	0x08000c27
 8000bcc:	08000c35 	.word	0x08000c35
 8000bd0:	08000c43 	.word	0x08000c43
 8000bd4:	08000c51 	.word	0x08000c51
 8000bd8:	08000c5f 	.word	0x08000c5f
 8000bdc:	08000c6d 	.word	0x08000c6d
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 8000be0:	230b      	movs	r3, #11
 8000be2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8000be4:	23ff      	movs	r3, #255	@ 0xff
 8000be6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8000be8:	2387      	movs	r3, #135	@ 0x87
 8000bea:	733b      	strb	r3, [r7, #12]
	    break;
 8000bec:	e048      	b.n	8000c80 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 8000bee:	2309      	movs	r3, #9
 8000bf0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 8000bf2:	23ff      	movs	r3, #255	@ 0xff
 8000bf4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 8000bf6:	2387      	movs	r3, #135	@ 0x87
 8000bf8:	733b      	strb	r3, [r7, #12]
            break;
 8000bfa:	e041      	b.n	8000c80 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8000bfc:	2309      	movs	r3, #9
 8000bfe:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8000c00:	23fa      	movs	r3, #250	@ 0xfa
 8000c02:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8000c04:	2387      	movs	r3, #135	@ 0x87
 8000c06:	733b      	strb	r3, [r7, #12]
            break;
 8000c08:	e03a      	b.n	8000c80 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 8000c0e:	23ff      	movs	r3, #255	@ 0xff
 8000c10:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 8000c12:	2387      	movs	r3, #135	@ 0x87
 8000c14:	733b      	strb	r3, [r7, #12]
            break;
 8000c16:	e033      	b.n	8000c80 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 8000c1c:	23fe      	movs	r3, #254	@ 0xfe
 8000c1e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8000c20:	2387      	movs	r3, #135	@ 0x87
 8000c22:	733b      	strb	r3, [r7, #12]
	    break;
 8000c24:	e02c      	b.n	8000c80 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 8000c26:	2304      	movs	r3, #4
 8000c28:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 8000c2a:	23fa      	movs	r3, #250	@ 0xfa
 8000c2c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 8000c2e:	2387      	movs	r3, #135	@ 0x87
 8000c30:	733b      	strb	r3, [r7, #12]
            break;
 8000c32:	e025      	b.n	8000c80 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 8000c34:	2303      	movs	r3, #3
 8000c36:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 8000c38:	23fa      	movs	r3, #250	@ 0xfa
 8000c3a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 8000c3c:	2387      	movs	r3, #135	@ 0x87
 8000c3e:	733b      	strb	r3, [r7, #12]
            break;
 8000c40:	e01e      	b.n	8000c80 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 8000c46:	23ff      	movs	r3, #255	@ 0xff
 8000c48:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 8000c4a:	2387      	movs	r3, #135	@ 0x87
 8000c4c:	733b      	strb	r3, [r7, #12]
            break;
 8000c4e:	e017      	b.n	8000c80 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 8000c50:	2341      	movs	r3, #65	@ 0x41
 8000c52:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 8000c54:	23fb      	movs	r3, #251	@ 0xfb
 8000c56:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 8000c58:	2386      	movs	r3, #134	@ 0x86
 8000c5a:	733b      	strb	r3, [r7, #12]
            break;
 8000c5c:	e010      	b.n	8000c80 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 8000c62:	23fa      	movs	r3, #250	@ 0xfa
 8000c64:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 8000c66:	2387      	movs	r3, #135	@ 0x87
 8000c68:	733b      	strb	r3, [r7, #12]
            break;
 8000c6a:	e009      	b.n	8000c80 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 8000c70:	23d9      	movs	r3, #217	@ 0xd9
 8000c72:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 8000c74:	2382      	movs	r3, #130	@ 0x82
 8000c76:	733b      	strb	r3, [r7, #12]
            break;
 8000c78:	e002      	b.n	8000c80 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
            break;
 8000c7e:	bf00      	nop
        }
        break;
 8000c80:	e002      	b.n	8000c88 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	73fb      	strb	r3, [r7, #15]
        break;
 8000c86:	bf00      	nop
    }

    if (set) {
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d013      	beq.n	8000cb6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	461a      	mov	r2, r3
 8000c92:	212a      	movs	r1, #42	@ 0x2a
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff fd5d 	bl	8000754 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 8000c9a:	7b7b      	ldrb	r3, [r7, #13]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	2129      	movs	r1, #41	@ 0x29
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff fd57 	bl	8000754 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 8000ca6:	7b3b      	ldrb	r3, [r7, #12]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	2128      	movs	r1, #40	@ 0x28
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fd51 	bl	8000754 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e000      	b.n	8000cb8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 8000cb6:	2301      	movs	r3, #1
    }
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d034      	beq.n	8000d44 <_ZN7MCP25159prepareIdEPhbm+0x84>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	3303      	adds	r3, #3
 8000cde:	8afa      	ldrh	r2, [r7, #22]
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8000ce4:	8afb      	ldrh	r3, [r7, #22]
 8000ce6:	0a1b      	lsrs	r3, r3, #8
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	3302      	adds	r3, #2
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	0c1b      	lsrs	r3, r3, #16
 8000cf6:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8000cf8:	8afb      	ldrh	r3, [r7, #22]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	f002 0203 	and.w	r2, r2, #3
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	7819      	ldrb	r1, [r3, #0]
 8000d0e:	8afb      	ldrh	r3, [r7, #22]
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f023 031f 	bic.w	r3, r3, #31
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	440a      	add	r2, r1
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	3301      	adds	r3, #1
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	f042 0208 	orr.w	r2, r2, #8
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 8000d36:	8afb      	ldrh	r3, [r7, #22]
 8000d38:	095b      	lsrs	r3, r3, #5
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 8000d42:	e013      	b.n	8000d6c <_ZN7MCP25159prepareIdEPhbm+0xac>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 8000d44:	8afb      	ldrh	r3, [r7, #22]
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 8000d50:	8afb      	ldrh	r3, [r7, #22]
 8000d52:	015a      	lsls	r2, r3, #5
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	3301      	adds	r3, #1
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	3303      	adds	r3, #3
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	3302      	adds	r3, #2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	460b      	mov	r3, r1
 8000d84:	72fb      	strb	r3, [r7, #11]
 8000d86:	4613      	mov	r3, r2
 8000d88:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f7ff fd73 	bl	8000876 <_ZN7MCP251513setConfigModeEv>
 8000d90:	4603      	mov	r3, r0
 8000d92:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8000d94:	7dbb      	ldrb	r3, [r7, #22]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 8000d9a:	7dbb      	ldrb	r3, [r7, #22]
 8000d9c:	e01c      	b.n	8000dd8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8000d9e:	7aba      	ldrb	r2, [r7, #10]
 8000da0:	f107 0110 	add.w	r1, r7, #16
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f7ff ff8a 	bl	8000cc0 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d003      	beq.n	8000dbe <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 8000db6:	e005      	b.n	8000dc4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 8000db8:	2320      	movs	r3, #32
 8000dba:	75fb      	strb	r3, [r7, #23]
 8000dbc:	e004      	b.n	8000dc8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 8000dbe:	2324      	movs	r3, #36	@ 0x24
 8000dc0:	75fb      	strb	r3, [r7, #23]
 8000dc2:	e001      	b.n	8000dc8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e007      	b.n	8000dd8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 8000dc8:	f107 0210 	add.w	r2, r7, #16
 8000dcc:	7df9      	ldrb	r1, [r7, #23]
 8000dce:	2304      	movs	r3, #4
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f7ff fcdf 	bl	8000794 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	460b      	mov	r3, r1
 8000dec:	72fb      	strb	r3, [r7, #11]
 8000dee:	4613      	mov	r3, r2
 8000df0:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f7ff fd3f 	bl	8000876 <_ZN7MCP251513setConfigModeEv>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8000dfc:	7dbb      	ldrb	r3, [r7, #22]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 8000e02:	7dbb      	ldrb	r3, [r7, #22]
 8000e04:	e035      	b.n	8000e72 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 8000e06:	7afb      	ldrb	r3, [r7, #11]
 8000e08:	2b05      	cmp	r3, #5
 8000e0a:	d821      	bhi.n	8000e50 <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 8000e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e14 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 8000e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e12:	bf00      	nop
 8000e14:	08000e2d 	.word	0x08000e2d
 8000e18:	08000e33 	.word	0x08000e33
 8000e1c:	08000e39 	.word	0x08000e39
 8000e20:	08000e3f 	.word	0x08000e3f
 8000e24:	08000e45 	.word	0x08000e45
 8000e28:	08000e4b 	.word	0x08000e4b
        case RXF0: reg = MCP_RXF0SIDH; break;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	75fb      	strb	r3, [r7, #23]
 8000e30:	e010      	b.n	8000e54 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 8000e32:	2304      	movs	r3, #4
 8000e34:	75fb      	strb	r3, [r7, #23]
 8000e36:	e00d      	b.n	8000e54 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	75fb      	strb	r3, [r7, #23]
 8000e3c:	e00a      	b.n	8000e54 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 8000e3e:	2310      	movs	r3, #16
 8000e40:	75fb      	strb	r3, [r7, #23]
 8000e42:	e007      	b.n	8000e54 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 8000e44:	2314      	movs	r3, #20
 8000e46:	75fb      	strb	r3, [r7, #23]
 8000e48:	e004      	b.n	8000e54 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 8000e4a:	2318      	movs	r3, #24
 8000e4c:	75fb      	strb	r3, [r7, #23]
 8000e4e:	e001      	b.n	8000e54 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e00e      	b.n	8000e72 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8000e54:	7aba      	ldrb	r2, [r7, #10]
 8000e56:	f107 0110 	add.w	r1, r7, #16
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff ff2f 	bl	8000cc0 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 8000e62:	f107 0210 	add.w	r2, r7, #16
 8000e66:	7df9      	ldrb	r1, [r7, #23]
 8000e68:	2304      	movs	r3, #4
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f7ff fc92 	bl	8000794 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop

08000e7c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

    return ERROR_ALLTXBUSY;
}

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	460b      	mov	r3, r1
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 8000e8a:	7afb      	ldrb	r3, [r7, #11]
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4a30      	ldr	r2, [pc, #192]	@ (8000f50 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 8000e90:	4413      	add	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	7859      	ldrb	r1, [r3, #1]
 8000e98:	f107 0210 	add.w	r2, r7, #16
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f7ff fc29 	bl	80006f6 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 8000ea4:	7c3b      	ldrb	r3, [r7, #16]
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	7c7a      	ldrb	r2, [r7, #17]
 8000eaa:	0952      	lsrs	r2, r2, #5
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	4413      	add	r3, r2
 8000eb0:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 8000eb2:	7c7b      	ldrb	r3, [r7, #17]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d014      	beq.n	8000ee6 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	009a      	lsls	r2, r3, #2
 8000ec0:	7c7b      	ldrb	r3, [r7, #17]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	7cba      	ldrb	r2, [r7, #18]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	7cfa      	ldrb	r2, [r7, #19]
 8000eda:	4413      	add	r3, r2
 8000edc:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ee4:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 8000ee6:	7d3b      	ldrb	r3, [r7, #20]
 8000ee8:	f003 030f 	and.w	r3, r3, #15
 8000eec:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d901      	bls.n	8000ef8 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e027      	b.n	8000f48 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f7ff fbda 	bl	80006b8 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8000f04:	4603      	mov	r3, r0
 8000f06:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 8000f08:	7dbb      	ldrb	r3, [r7, #22]
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000f18:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7dfa      	ldrb	r2, [r7, #23]
 8000f24:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	7899      	ldrb	r1, [r3, #2]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f103 0208 	add.w	r2, r3, #8
 8000f30:	7dfb      	ldrb	r3, [r7, #23]
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f7ff fbdf 	bl	80006f6 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	78da      	ldrb	r2, [r3, #3]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	212c      	movs	r1, #44	@ 0x2c
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f7ff fc56 	bl	80007f2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	08005890 	.word	0x08005890

08000f54 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff fc71 	bl	8000846 <_ZN7MCP25159getStatusEv>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	2100      	movs	r1, #0
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff80 	bl	8000e7c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e00e      	b.n	8000fa0 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	2101      	movs	r1, #1
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff73 	bl	8000e7c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e001      	b.n	8000fa0 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 8000f9c:	2305      	movs	r3, #5
 8000f9e:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <MX_DMA_Init+0x3c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe8 <MX_DMA_Init+0x3c>)
 8000fbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <MX_DMA_Init+0x3c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	200b      	movs	r0, #11
 8000fd4:	f000 ffc7 	bl	8001f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fd8:	200b      	movs	r0, #11
 8000fda:	f000 ffe0 	bl	8001f9e <HAL_NVIC_EnableIRQ>

}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800

08000fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b47      	ldr	r3, [pc, #284]	@ (8001124 <MX_GPIO_Init+0x138>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a46      	ldr	r2, [pc, #280]	@ (8001124 <MX_GPIO_Init+0x138>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b44      	ldr	r3, [pc, #272]	@ (8001124 <MX_GPIO_Init+0x138>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b40      	ldr	r3, [pc, #256]	@ (8001124 <MX_GPIO_Init+0x138>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a3f      	ldr	r2, [pc, #252]	@ (8001124 <MX_GPIO_Init+0x138>)
 8001028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b3d      	ldr	r3, [pc, #244]	@ (8001124 <MX_GPIO_Init+0x138>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b39      	ldr	r3, [pc, #228]	@ (8001124 <MX_GPIO_Init+0x138>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a38      	ldr	r2, [pc, #224]	@ (8001124 <MX_GPIO_Init+0x138>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b36      	ldr	r3, [pc, #216]	@ (8001124 <MX_GPIO_Init+0x138>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b32      	ldr	r3, [pc, #200]	@ (8001124 <MX_GPIO_Init+0x138>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a31      	ldr	r2, [pc, #196]	@ (8001124 <MX_GPIO_Init+0x138>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b2f      	ldr	r3, [pc, #188]	@ (8001124 <MX_GPIO_Init+0x138>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001078:	482b      	ldr	r0, [pc, #172]	@ (8001128 <MX_GPIO_Init+0x13c>)
 800107a:	f001 fcc1 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2110      	movs	r1, #16
 8001082:	482a      	ldr	r0, [pc, #168]	@ (800112c <MX_GPIO_Init+0x140>)
 8001084:	f001 fcbc 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001088:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4821      	ldr	r0, [pc, #132]	@ (8001128 <MX_GPIO_Init+0x13c>)
 80010a2:	f001 fb29 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010a6:	2310      	movs	r3, #16
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	481b      	ldr	r0, [pc, #108]	@ (800112c <MX_GPIO_Init+0x140>)
 80010be:	f001 fb1b 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT4_Pin */
  GPIO_InitStruct.Pin = BT4_Pin;
 80010c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010c8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80010cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT4_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4815      	ldr	r0, [pc, #84]	@ (8001130 <MX_GPIO_Init+0x144>)
 80010da:	f001 fb0d 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT3_Pin BT2_Pin BT1_Pin */
  GPIO_InitStruct.Pin = BT3_Pin|BT2_Pin|BT1_Pin;
 80010de:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	480d      	ldr	r0, [pc, #52]	@ (800112c <MX_GPIO_Init+0x140>)
 80010f6:	f001 faff 	bl	80026f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2017      	movs	r0, #23
 8001100:	f000 ff31 	bl	8001f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001104:	2017      	movs	r0, #23
 8001106:	f000 ff4a 	bl	8001f9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2028      	movs	r0, #40	@ 0x28
 8001110:	f000 ff29 	bl	8001f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001114:	2028      	movs	r0, #40	@ 0x28
 8001116:	f000 ff42 	bl	8001f9e <HAL_NVIC_EnableIRQ>

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	@ 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40020800 	.word	0x40020800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400

08001134 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]
	} else if (GPIO_PIN == BT2_Pin) {

	}  else if (GPIO_PIN == BT1_Pin) {

	}
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001154:	f000 fd96 	bl	8001c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001158:	f000 f846 	bl	80011e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115c:	f7ff ff46 	bl	8000fec <MX_GPIO_Init>
  MX_DMA_Init();
 8001160:	f7ff ff24 	bl	8000fac <MX_DMA_Init>
  MX_SPI1_Init();
 8001164:	f000 fa70 	bl	8001648 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001168:	f000 fbe4 	bl	8001934 <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 800116c:	f000 fce6 	bl	8001b3c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8001170:	f000 faa0 	bl	80016b4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  initializeMCP2515();
 8001174:	f000 f8aa 	bl	80012cc <initializeMCP2515>
  int G1;
  struct can_frame frame;
  uint16_t RPM;


  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	f207 423c 	addw	r2, r7, #1084	@ 0x43c
 8001180:	2100      	movs	r1, #0
 8001182:	4818      	ldr	r0, [pc, #96]	@ (80011e4 <main+0x98>)
 8001184:	f000 f968 	bl	8001458 <shiftLightsInit>
  HAL_Delay(1000);
 8001188:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800118c:	f000 fdec 	bl	8001d68 <HAL_Delay>
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	f207 423c 	addw	r2, r7, #1084	@ 0x43c
 8001198:	2100      	movs	r1, #0
 800119a:	4812      	ldr	r0, [pc, #72]	@ (80011e4 <main+0x98>)
 800119c:	f000 f9ec 	bl	8001578 <startUp>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (readMessage(&frame)) {
 80011a0:	463b      	mov	r3, r7
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f8a4 	bl	80012f0 <readMessage>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f8      	beq.n	80011a0 <main+0x54>
		if (frame.can_id == 1520) { // 1520 decimal
 80011ae:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80011b2:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f5b3 6fbe 	cmp.w	r3, #1520	@ 0x5f0
 80011bc:	d1f0      	bne.n	80011a0 <main+0x54>
			//Extract 2 bytes starting at offset 2
			RPM = ((uint16_t)frame.data[2] << 8) | frame.data[3];
 80011be:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80011c2:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 80011c6:	7a9b      	ldrb	r3, [r3, #10]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80011d0:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 80011d4:	7adb      	ldrb	r3, [r3, #11]
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21b      	sxth	r3, r3
 80011dc:	f8a7 346e 	strh.w	r3, [r7, #1134]	@ 0x46e
	if (readMessage(&frame)) {
 80011e0:	e7de      	b.n	80011a0 <main+0x54>
 80011e2:	bf00      	nop
 80011e4:	200000ec 	.word	0x200000ec

080011e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b094      	sub	sp, #80	@ 0x50
 80011ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ee:	f107 0320 	add.w	r3, r7, #32
 80011f2:	2230      	movs	r2, #48	@ 0x30
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 fb0b 	bl	8005812 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	4b29      	ldr	r3, [pc, #164]	@ (80012b8 <SystemClock_Config+0xd0>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001214:	4a28      	ldr	r2, [pc, #160]	@ (80012b8 <SystemClock_Config+0xd0>)
 8001216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121a:	6413      	str	r3, [r2, #64]	@ 0x40
 800121c:	4b26      	ldr	r3, [pc, #152]	@ (80012b8 <SystemClock_Config+0xd0>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <SystemClock_Config+0xd4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001234:	4a21      	ldr	r2, [pc, #132]	@ (80012bc <SystemClock_Config+0xd4>)
 8001236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <SystemClock_Config+0xd4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001248:	2301      	movs	r3, #1
 800124a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800124c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001252:	2302      	movs	r3, #2
 8001254:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001256:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800125a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800125c:	2319      	movs	r3, #25
 800125e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001260:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001264:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001266:	2304      	movs	r3, #4
 8001268:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800126a:	2307      	movs	r3, #7
 800126c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	4618      	mov	r0, r3
 8001274:	f001 fd06 	bl	8002c84 <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800127e:	f000 f81f 	bl	80012c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001282:	230f      	movs	r3, #15
 8001284:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2302      	movs	r3, #2
 8001288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800128e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001292:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2102      	movs	r1, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 ff68 	bl	8003174 <HAL_RCC_ClockConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012aa:	f000 f809 	bl	80012c0 <Error_Handler>
  }
}
 80012ae:	bf00      	nop
 80012b0:	3750      	adds	r7, #80	@ 0x50
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <Error_Handler+0x8>

080012cc <initializeMCP2515>:
#include "stm32-hal-mcp2515/mcp2515.h"
#include "spi.h"
#include "gpio.h"

MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	myMCP.reset();
 80012d0:	4806      	ldr	r0, [pc, #24]	@ (80012ec <initializeMCP2515+0x20>)
 80012d2:	f7ff f957 	bl	8000584 <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 80012d6:	2202      	movs	r2, #2
 80012d8:	210e      	movs	r1, #14
 80012da:	4804      	ldr	r0, [pc, #16]	@ (80012ec <initializeMCP2515+0x20>)
 80012dc:	f7ff fb24 	bl	8000928 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <initializeMCP2515+0x20>)
 80012e2:	f7ff fad5 	bl	8000890 <_ZN7MCP251513setNormalModeEv>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000028 	.word	0x20000028

080012f0 <readMessage>:

int sendMessage(struct can_frame *frame) {
	return myMCP.sendMessage(frame);
}

int readMessage(struct can_frame *frame) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4804      	ldr	r0, [pc, #16]	@ (800130c <readMessage+0x1c>)
 80012fc:	f7ff fe2a 	bl	8000f54 <_ZN7MCP251511readMessageEP9can_frame>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000028 	.word	0x20000028

08001310 <_Z41__static_initialization_and_destruction_0ii>:
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af02      	add	r7, sp, #8
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d10c      	bne.n	800133a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001326:	4293      	cmp	r3, r2
 8001328:	d107      	bne.n	800133a <_Z41__static_initialization_and_destruction_0ii+0x2a>
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 800132a:	2310      	movs	r3, #16
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001330:	220a      	movs	r2, #10
 8001332:	4905      	ldr	r1, [pc, #20]	@ (8001348 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001334:	4805      	ldr	r0, [pc, #20]	@ (800134c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001336:	f7ff f8c5 	bl	80004c4 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40020000 	.word	0x40020000
 8001348:	20000094 	.word	0x20000094
 800134c:	20000028 	.word	0x20000028

08001350 <_GLOBAL__sub_I_myMCP>:
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
 8001354:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001358:	2001      	movs	r0, #1
 800135a:	f7ff ffd9 	bl	8001310 <_Z41__static_initialization_and_destruction_0ii>
 800135e:	bd80      	pop	{r7, pc}

08001360 <setColor>:
int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	460b      	mov	r3, r1
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	4613      	mov	r3, r2
 8001374:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 8001376:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001384:	4413      	add	r3, r2
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	3301      	adds	r3, #1
 800138e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001390:	4413      	add	r3, r2
 8001392:	79ba      	ldrb	r2, [r7, #6]
 8001394:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	3302      	adds	r3, #2
 800139a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800139c:	4413      	add	r3, r2
 800139e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80013a2:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	e02a      	b.n	8001400 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	e021      	b.n	80013f4 <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d009      	beq.n	80013dc <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	00da      	lsls	r2, r3, #3
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	4413      	add	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013d4:	4413      	add	r3, r2
 80013d6:	2246      	movs	r2, #70	@ 0x46
 80013d8:	801a      	strh	r2, [r3, #0]
 80013da:	e008      	b.n	80013ee <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	00da      	lsls	r2, r3, #3
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	4413      	add	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013e8:	4413      	add	r3, r2
 80013ea:	2223      	movs	r2, #35	@ 0x23
 80013ec:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	ddda      	ble.n	80013b0 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3301      	adds	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	3302      	adds	r3, #2
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	429a      	cmp	r2, r3
 8001408:	ddcf      	ble.n	80013aa <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 800140a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	e008      	b.n	8001424 <setColor+0xc4>
    	ledbytes[i] = 0;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001418:	4413      	add	r3, r2
 800141a:	2200      	movs	r2, #0
 800141c:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f240 2215 	movw	r2, #533	@ 0x215
 800142a:	4293      	cmp	r3, r2
 800142c:	ddf1      	ble.n	8001412 <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 800142e:	f240 2316 	movw	r3, #534	@ 0x216
 8001432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f002 fec2 	bl	80041c0 <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 800143c:	bf00      	nop
 800143e:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <setColor+0xf4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0fb      	beq.n	800143e <setColor+0xde>
    datasentflag = 0;
 8001446:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <setColor+0xf4>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
}
 800144c:	bf00      	nop
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000038 	.word	0x20000038

08001458 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	e013      	b.n	8001494 <shiftLightsInit+0x3c>
		ledcolors[i] = 128;
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	2280      	movs	r2, #128	@ 0x80
 8001474:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 255;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3301      	adds	r3, #1
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	22ff      	movs	r2, #255	@ 0xff
 8001480:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 0;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3302      	adds	r3, #2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3303      	adds	r3, #3
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	2b2f      	cmp	r3, #47	@ 0x2f
 8001498:	dde8      	ble.n	800146c <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	e02a      	b.n	80014f6 <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	e021      	b.n	80014ea <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	00da      	lsls	r2, r3, #3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	4413      	add	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	2246      	movs	r2, #70	@ 0x46
 80014ce:	801a      	strh	r2, [r3, #0]
 80014d0:	e008      	b.n	80014e4 <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	00da      	lsls	r2, r3, #3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	4413      	add	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	2223      	movs	r2, #35	@ 0x23
 80014e2:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	2b07      	cmp	r3, #7
 80014ee:	ddda      	ble.n	80014a6 <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	3301      	adds	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80014fa:	ddd1      	ble.n	80014a0 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 80014fc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	e008      	b.n	8001516 <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	4413      	add	r3, r2
 800150c:	2200      	movs	r2, #0
 800150e:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	3301      	adds	r3, #1
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f240 2215 	movw	r2, #533	@ 0x215
 800151c:	4293      	cmp	r3, r2
 800151e:	ddf1      	ble.n	8001504 <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001520:	f240 2316 	movw	r3, #534	@ 0x216
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f002 fe49 	bl	80041c0 <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 800152e:	bf00      	nop
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <shiftLightsInit+0xf4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0fb      	beq.n	8001530 <shiftLightsInit+0xd8>
	datasentflag = 0;
 8001538:	4b04      	ldr	r3, [pc, #16]	@ (800154c <shiftLightsInit+0xf4>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
}
 8001542:	bf00      	nop
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000038 	.word	0x20000038

08001550 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8001558:	2100      	movs	r1, #0
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800155c:	f002 ffe0 	bl	8004520 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001560:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200000ec 	.word	0x200000ec
 8001574:	20000038 	.word	0x20000038

08001578 <startUp>:
	} else {
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	}
}

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	@ 0x30
 800157c:	af04      	add	r7, sp, #16
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8001586:	2307      	movs	r3, #7
 8001588:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 8; i++) {
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e026      	b.n	80015de <startUp+0x66>
		setColor(htim, Channel, 0, 255, 128, ledcolors, ledbytes, middle - i);
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	9303      	str	r3, [sp, #12]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	23ff      	movs	r3, #255	@ 0xff
 80015a6:	2200      	movs	r2, #0
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f7ff fed8 	bl	8001360 <setColor>
		setColor(htim, Channel, 0, 255, 128, ledcolors, ledbytes, middle + i + 1);
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	3301      	adds	r3, #1
 80015b8:	9303      	str	r3, [sp, #12]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	9302      	str	r3, [sp, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	2380      	movs	r3, #128	@ 0x80
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	23ff      	movs	r3, #255	@ 0xff
 80015c8:	2200      	movs	r2, #0
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f7ff fec7 	bl	8001360 <setColor>
		HAL_Delay(25);
 80015d2:	2019      	movs	r0, #25
 80015d4:	f000 fbc8 	bl	8001d68 <HAL_Delay>
	for (int i = 0; i < 8; i++) {
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	3301      	adds	r3, #1
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	2b07      	cmp	r3, #7
 80015e2:	ddd5      	ble.n	8001590 <startUp+0x18>
	}
	for (int i = 0; i < 8; i++) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	e026      	b.n	8001638 <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	9303      	str	r3, [sp, #12]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	2300      	movs	r3, #0
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2300      	movs	r3, #0
 8001600:	2200      	movs	r2, #0
 8001602:	68b9      	ldr	r1, [r7, #8]
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff feab 	bl	8001360 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	4413      	add	r3, r2
 8001610:	3301      	adds	r3, #1
 8001612:	9303      	str	r3, [sp, #12]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	2300      	movs	r3, #0
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2300      	movs	r3, #0
 8001622:	2200      	movs	r2, #0
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f7ff fe9a 	bl	8001360 <setColor>
		HAL_Delay(25);
 800162c:	2019      	movs	r0, #25
 800162e:	f000 fb9b 	bl	8001d68 <HAL_Delay>
	for (int i = 0; i < 8; i++) {
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	3301      	adds	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2b07      	cmp	r3, #7
 800163c:	ddd5      	ble.n	80015ea <startUp+0x72>
	}
}
 800163e:	bf00      	nop
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800164c:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <MX_SPI1_Init+0x64>)
 800164e:	4a18      	ldr	r2, [pc, #96]	@ (80016b0 <MX_SPI1_Init+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <MX_SPI1_Init+0x64>)
 8001654:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800165a:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <MX_SPI1_Init+0x64>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <MX_SPI1_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001666:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <MX_SPI1_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <MX_SPI1_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001672:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <MX_SPI1_Init+0x64>)
 8001674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001678:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800167a:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <MX_SPI1_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001680:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <MX_SPI1_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <MX_SPI1_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168c:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <MX_SPI1_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <MX_SPI1_Init+0x64>)
 8001694:	220a      	movs	r2, #10
 8001696:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	@ (80016ac <MX_SPI1_Init+0x64>)
 800169a:	f001 ff17 	bl	80034cc <HAL_SPI_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016a4:	f7ff fe0c 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000003c 	.word	0x2000003c
 80016b0:	40013000 	.word	0x40013000

080016b4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <MX_SPI2_Init+0x64>)
 80016ba:	4a18      	ldr	r2, [pc, #96]	@ (800171c <MX_SPI2_Init+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016be:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <MX_SPI2_Init+0x64>)
 80016c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016c6:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <MX_SPI2_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <MX_SPI2_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <MX_SPI2_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <MX_SPI2_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <MX_SPI2_Init+0x64>)
 80016e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <MX_SPI2_Init+0x64>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <MX_SPI2_Init+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <MX_SPI2_Init+0x64>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f8:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <MX_SPI2_Init+0x64>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <MX_SPI2_Init+0x64>)
 8001700:	220a      	movs	r2, #10
 8001702:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	@ (8001718 <MX_SPI2_Init+0x64>)
 8001706:	f001 fee1 	bl	80034cc <HAL_SPI_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001710:	f7ff fdd6 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000094 	.word	0x20000094
 800171c:	40003800 	.word	0x40003800

08001720 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	@ 0x30
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a32      	ldr	r2, [pc, #200]	@ (8001808 <HAL_SPI_MspInit+0xe8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d12c      	bne.n	800179c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	4b31      	ldr	r3, [pc, #196]	@ (800180c <HAL_SPI_MspInit+0xec>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	4a30      	ldr	r2, [pc, #192]	@ (800180c <HAL_SPI_MspInit+0xec>)
 800174c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001750:	6453      	str	r3, [r2, #68]	@ 0x44
 8001752:	4b2e      	ldr	r3, [pc, #184]	@ (800180c <HAL_SPI_MspInit+0xec>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <HAL_SPI_MspInit+0xec>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a29      	ldr	r2, [pc, #164]	@ (800180c <HAL_SPI_MspInit+0xec>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b27      	ldr	r3, [pc, #156]	@ (800180c <HAL_SPI_MspInit+0xec>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800177a:	23e0      	movs	r3, #224	@ 0xe0
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800178a:	2305      	movs	r3, #5
 800178c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	4619      	mov	r1, r3
 8001794:	481e      	ldr	r0, [pc, #120]	@ (8001810 <HAL_SPI_MspInit+0xf0>)
 8001796:	f000 ffaf 	bl	80026f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800179a:	e031      	b.n	8001800 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001814 <HAL_SPI_MspInit+0xf4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d12c      	bne.n	8001800 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <HAL_SPI_MspInit+0xec>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	4a17      	ldr	r2, [pc, #92]	@ (800180c <HAL_SPI_MspInit+0xec>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_SPI_MspInit+0xec>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <HAL_SPI_MspInit+0xec>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a10      	ldr	r2, [pc, #64]	@ (800180c <HAL_SPI_MspInit+0xec>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_SPI_MspInit+0xec>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80017de:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80017e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017f0:	2305      	movs	r3, #5
 80017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	4807      	ldr	r0, [pc, #28]	@ (8001818 <HAL_SPI_MspInit+0xf8>)
 80017fc:	f000 ff7c 	bl	80026f8 <HAL_GPIO_Init>
}
 8001800:	bf00      	nop
 8001802:	3730      	adds	r7, #48	@ 0x30
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40013000 	.word	0x40013000
 800180c:	40023800 	.word	0x40023800
 8001810:	40020000 	.word	0x40020000
 8001814:	40003800 	.word	0x40003800
 8001818:	40020400 	.word	0x40020400

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <HAL_MspInit+0x4c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182a:	4a0f      	ldr	r2, [pc, #60]	@ (8001868 <HAL_MspInit+0x4c>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001830:	6453      	str	r3, [r2, #68]	@ 0x44
 8001832:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_MspInit+0x4c>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <HAL_MspInit+0x4c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	4a08      	ldr	r2, [pc, #32]	@ (8001868 <HAL_MspInit+0x4c>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800184c:	6413      	str	r3, [r2, #64]	@ 0x40
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_MspInit+0x4c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <NMI_Handler+0x4>

08001874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <MemManage_Handler+0x4>

08001884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <UsageFault_Handler+0x4>

08001894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c2:	f000 fa31 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <DMA1_Stream0_IRQHandler+0x10>)
 80018d2:	f000 fca7 	bl	8002224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000134 	.word	0x20000134

080018e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT3_Pin);
 80018e4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80018e8:	f001 f8a4 	bl	8002a34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT2_Pin);
 80018ec:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80018f0:	f001 f8a0 	bl	8002a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT1_Pin);
 80018fc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001900:	f001 f898 	bl	8002a34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT4_Pin);
 8001904:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001908:	f001 f894 	bl	8002a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <SystemInit+0x20>)
 8001916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800191a:	4a05      	ldr	r2, [pc, #20]	@ (8001930 <SystemInit+0x20>)
 800191c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	@ 0x38
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	f107 0320 	add.w	r3, r7, #32
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001964:	4b2c      	ldr	r3, [pc, #176]	@ (8001a18 <MX_TIM4_Init+0xe4>)
 8001966:	4a2d      	ldr	r2, [pc, #180]	@ (8001a1c <MX_TIM4_Init+0xe8>)
 8001968:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800196a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a18 <MX_TIM4_Init+0xe4>)
 800196c:	2200      	movs	r2, #0
 800196e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001970:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <MX_TIM4_Init+0xe4>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 8001976:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <MX_TIM4_Init+0xe4>)
 8001978:	2269      	movs	r2, #105	@ 0x69
 800197a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197c:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <MX_TIM4_Init+0xe4>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001982:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <MX_TIM4_Init+0xe4>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001988:	4823      	ldr	r0, [pc, #140]	@ (8001a18 <MX_TIM4_Init+0xe4>)
 800198a:	f002 fb71 	bl	8004070 <HAL_TIM_Base_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001994:	f7ff fc94 	bl	80012c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800199c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800199e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019a2:	4619      	mov	r1, r3
 80019a4:	481c      	ldr	r0, [pc, #112]	@ (8001a18 <MX_TIM4_Init+0xe4>)
 80019a6:	f002 ff43 	bl	8004830 <HAL_TIM_ConfigClockSource>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80019b0:	f7ff fc86 	bl	80012c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019b4:	4818      	ldr	r0, [pc, #96]	@ (8001a18 <MX_TIM4_Init+0xe4>)
 80019b6:	f002 fbaa 	bl	800410e <HAL_TIM_PWM_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80019c0:	f7ff fc7e 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019cc:	f107 0320 	add.w	r3, r7, #32
 80019d0:	4619      	mov	r1, r3
 80019d2:	4811      	ldr	r0, [pc, #68]	@ (8001a18 <MX_TIM4_Init+0xe4>)
 80019d4:	f003 fbb0 	bl	8005138 <HAL_TIMEx_MasterConfigSynchronization>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80019de:	f7ff fc6f 	bl	80012c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e2:	2360      	movs	r3, #96	@ 0x60
 80019e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2200      	movs	r2, #0
 80019f6:	4619      	mov	r1, r3
 80019f8:	4807      	ldr	r0, [pc, #28]	@ (8001a18 <MX_TIM4_Init+0xe4>)
 80019fa:	f002 fe57 	bl	80046ac <HAL_TIM_PWM_ConfigChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001a04:	f7ff fc5c 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a08:	4803      	ldr	r0, [pc, #12]	@ (8001a18 <MX_TIM4_Init+0xe4>)
 8001a0a:	f000 f85d 	bl	8001ac8 <HAL_TIM_MspPostInit>

}
 8001a0e:	bf00      	nop
 8001a10:	3738      	adds	r7, #56	@ 0x38
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200000ec 	.word	0x200000ec
 8001a1c:	40000800 	.word	0x40000800

08001a20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a22      	ldr	r2, [pc, #136]	@ (8001ab8 <HAL_TIM_Base_MspInit+0x98>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d13d      	bne.n	8001aae <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b21      	ldr	r3, [pc, #132]	@ (8001abc <HAL_TIM_Base_MspInit+0x9c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	4a20      	ldr	r2, [pc, #128]	@ (8001abc <HAL_TIM_Base_MspInit+0x9c>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a42:	4b1e      	ldr	r3, [pc, #120]	@ (8001abc <HAL_TIM_Base_MspInit+0x9c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a50:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xa4>)
 8001a52:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a56:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a5a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a5e:	2240      	movs	r2, #64	@ 0x40
 8001a60:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a62:	4b17      	ldr	r3, [pc, #92]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a68:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a6e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a76:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a7e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001a92:	480b      	ldr	r0, [pc, #44]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8001a94:	f000 fa9e 	bl	8001fd4 <HAL_DMA_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001a9e:	f7ff fc0f 	bl	80012c0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a06      	ldr	r2, [pc, #24]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001aa8:	4a05      	ldr	r2, [pc, #20]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40000800 	.word	0x40000800
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	20000134 	.word	0x20000134
 8001ac4:	40026010 	.word	0x40026010

08001ac8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a12      	ldr	r2, [pc, #72]	@ (8001b30 <HAL_TIM_MspPostInit+0x68>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d11d      	bne.n	8001b26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_TIM_MspPostInit+0x6c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a10      	ldr	r2, [pc, #64]	@ (8001b34 <HAL_TIM_MspPostInit+0x6c>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <HAL_TIM_MspPostInit+0x6c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b06:	2340      	movs	r3, #64	@ 0x40
 8001b08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	@ (8001b38 <HAL_TIM_MspPostInit+0x70>)
 8001b22:	f000 fde9 	bl	80026f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40000800 	.word	0x40000800
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020400 	.word	0x40020400

08001b3c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b40:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b42:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001b46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001b48:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b50:	2202      	movs	r2, #2
 8001b52:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b80:	f000 ff70 	bl	8002a64 <HAL_PCD_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001b8a:	f7ff fb99 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000194 	.word	0x20000194

08001b98 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	@ 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bb8:	d132      	bne.n	8001c20 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <HAL_PCD_MspInit+0x90>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	4a19      	ldr	r2, [pc, #100]	@ (8001c28 <HAL_PCD_MspInit+0x90>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bca:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <HAL_PCD_MspInit+0x90>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bd6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001be8:	230a      	movs	r3, #10
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480e      	ldr	r0, [pc, #56]	@ (8001c2c <HAL_PCD_MspInit+0x94>)
 8001bf4:	f000 fd80 	bl	80026f8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_PCD_MspInit+0x90>)
 8001bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <HAL_PCD_MspInit+0x90>)
 8001bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c02:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <HAL_PCD_MspInit+0x90>)
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0c:	4a06      	ldr	r2, [pc, #24]	@ (8001c28 <HAL_PCD_MspInit+0x90>)
 8001c0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c12:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c14:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <HAL_PCD_MspInit+0x90>)
 8001c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	@ 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020000 	.word	0x40020000

08001c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c34:	f7ff fe6c 	bl	8001910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c3a:	490d      	ldr	r1, [pc, #52]	@ (8001c70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c40:	e002      	b.n	8001c48 <LoopCopyDataInit>

08001c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c46:	3304      	adds	r3, #4

08001c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c4c:	d3f9      	bcc.n	8001c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c50:	4c0a      	ldr	r4, [pc, #40]	@ (8001c7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c54:	e001      	b.n	8001c5a <LoopFillZerobss>

08001c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c58:	3204      	adds	r2, #4

08001c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c5c:	d3fb      	bcc.n	8001c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5e:	f003 fde1 	bl	8005824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c62:	f7ff fa73 	bl	800114c <main>
  bx  lr    
 8001c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c74:	080058c4 	.word	0x080058c4
  ldr r2, =_sbss
 8001c78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c7c:	2000067c 	.word	0x2000067c

08001c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC_IRQHandler>
	...

08001c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c88:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <HAL_Init+0x40>)
 8001c8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <HAL_Init+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_Init+0x40>)
 8001c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	@ (8001cc4 <HAL_Init+0x40>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 f94f 	bl	8001f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb2:	200f      	movs	r0, #15
 8001cb4:	f000 f808 	bl	8001cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff fdb0 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023c00 	.word	0x40023c00

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd0:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <HAL_InitTick+0x54>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <HAL_InitTick+0x58>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f967 	bl	8001fba <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f000 f92f 	bl	8001f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	@ (8001d24 <HAL_InitTick+0x5c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000008 	.word	0x20000008
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_IncTick+0x20>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_IncTick+0x24>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <HAL_IncTick+0x24>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	20000678 	.word	0x20000678

08001d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b03      	ldr	r3, [pc, #12]	@ (8001d64 <HAL_GetTick+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000678 	.word	0x20000678

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff ffee 	bl	8001d50 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d005      	beq.n	8001d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <HAL_Delay+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d8e:	bf00      	nop
 8001d90:	f7ff ffde 	bl	8001d50 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f7      	bhi.n	8001d90 <HAL_Delay+0x28>
  {
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000008 	.word	0x20000008

08001db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	@ (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db0b      	blt.n	8001e3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4907      	ldr	r1, [pc, #28]	@ (8001e4c <__NVIC_EnableIRQ+0x38>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100

08001e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db0a      	blt.n	8001e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	490c      	ldr	r1, [pc, #48]	@ (8001e9c <__NVIC_SetPriority+0x4c>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	440b      	add	r3, r1
 8001e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e78:	e00a      	b.n	8001e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4908      	ldr	r1, [pc, #32]	@ (8001ea0 <__NVIC_SetPriority+0x50>)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	3b04      	subs	r3, #4
 8001e88:	0112      	lsls	r2, r2, #4
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	761a      	strb	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	@ 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f1c3 0307 	rsb	r3, r3, #7
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	bf28      	it	cs
 8001ec2:	2304      	movcs	r3, #4
 8001ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d902      	bls.n	8001ed4 <NVIC_EncodePriority+0x30>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3b03      	subs	r3, #3
 8001ed2:	e000      	b.n	8001ed6 <NVIC_EncodePriority+0x32>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	4313      	orrs	r3, r2
         );
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	@ 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f1c:	d301      	bcc.n	8001f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00f      	b.n	8001f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f22:	4a0a      	ldr	r2, [pc, #40]	@ (8001f4c <SysTick_Config+0x40>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f7ff ff8e 	bl	8001e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <SysTick_Config+0x40>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3a:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <SysTick_Config+0x40>)
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	e000e010 	.word	0xe000e010

08001f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ff29 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f78:	f7ff ff3e 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	6978      	ldr	r0, [r7, #20]
 8001f84:	f7ff ff8e 	bl	8001ea4 <NVIC_EncodePriority>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff5d 	bl	8001e50 <__NVIC_SetPriority>
}
 8001f96:	bf00      	nop
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff31 	bl	8001e14 <__NVIC_EnableIRQ>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ffa2 	bl	8001f0c <SysTick_Config>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff feb6 	bl	8001d50 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e099      	b.n	8002124 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002010:	e00f      	b.n	8002032 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002012:	f7ff fe9d 	bl	8001d50 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b05      	cmp	r3, #5
 800201e:	d908      	bls.n	8002032 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2203      	movs	r2, #3
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e078      	b.n	8002124 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e8      	bne.n	8002012 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4b38      	ldr	r3, [pc, #224]	@ (800212c <HAL_DMA_Init+0x158>)
 800204c:	4013      	ands	r3, r2
 800204e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800206a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4313      	orrs	r3, r2
 8002082:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	2b04      	cmp	r3, #4
 800208a:	d107      	bne.n	800209c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	4313      	orrs	r3, r2
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f023 0307 	bic.w	r3, r3, #7
 80020b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d117      	bne.n	80020f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00e      	beq.n	80020f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fa91 	bl	8002600 <DMA_CheckFifoParam>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2240      	movs	r2, #64	@ 0x40
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020f2:	2301      	movs	r3, #1
 80020f4:	e016      	b.n	8002124 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fa48 	bl	8002594 <DMA_CalcBaseAndBitshift>
 8002104:	4603      	mov	r3, r0
 8002106:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210c:	223f      	movs	r2, #63	@ 0x3f
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	f010803f 	.word	0xf010803f

08002130 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002146:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_DMA_Start_IT+0x26>
 8002152:	2302      	movs	r3, #2
 8002154:	e040      	b.n	80021d8 <HAL_DMA_Start_IT+0xa8>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d12f      	bne.n	80021ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2202      	movs	r2, #2
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f9da 	bl	8002538 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002188:	223f      	movs	r2, #63	@ 0x3f
 800218a:	409a      	lsls	r2, r3
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0216 	orr.w	r2, r2, #22
 800219e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0208 	orr.w	r2, r2, #8
 80021b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e005      	b.n	80021d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d004      	beq.n	80021fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2280      	movs	r2, #128	@ 0x80
 80021f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00c      	b.n	8002218 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2205      	movs	r2, #5
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0201 	bic.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002230:	4b8e      	ldr	r3, [pc, #568]	@ (800246c <HAL_DMA_IRQHandler+0x248>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a8e      	ldr	r2, [pc, #568]	@ (8002470 <HAL_DMA_IRQHandler+0x24c>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0a9b      	lsrs	r3, r3, #10
 800223c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002242:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224e:	2208      	movs	r2, #8
 8002250:	409a      	lsls	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01a      	beq.n	8002290 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0204 	bic.w	r2, r2, #4
 8002276:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	2208      	movs	r2, #8
 800227e:	409a      	lsls	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002294:	2201      	movs	r2, #1
 8002296:	409a      	lsls	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d012      	beq.n	80022c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	2201      	movs	r2, #1
 80022b4:	409a      	lsls	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022be:	f043 0202 	orr.w	r2, r3, #2
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ca:	2204      	movs	r2, #4
 80022cc:	409a      	lsls	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d012      	beq.n	80022fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e8:	2204      	movs	r2, #4
 80022ea:	409a      	lsls	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f4:	f043 0204 	orr.w	r2, r3, #4
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	2210      	movs	r2, #16
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d043      	beq.n	8002394 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d03c      	beq.n	8002394 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231e:	2210      	movs	r2, #16
 8002320:	409a      	lsls	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d018      	beq.n	8002366 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d108      	bne.n	8002354 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d024      	beq.n	8002394 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
 8002352:	e01f      	b.n	8002394 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01b      	beq.n	8002394 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
 8002364:	e016      	b.n	8002394 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d107      	bne.n	8002384 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0208 	bic.w	r2, r2, #8
 8002382:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002398:	2220      	movs	r2, #32
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 808f 	beq.w	80024c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8087 	beq.w	80024c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ba:	2220      	movs	r2, #32
 80023bc:	409a      	lsls	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d136      	bne.n	800243c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0216 	bic.w	r2, r2, #22
 80023dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d103      	bne.n	80023fe <HAL_DMA_IRQHandler+0x1da>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0208 	bic.w	r2, r2, #8
 800240c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002412:	223f      	movs	r2, #63	@ 0x3f
 8002414:	409a      	lsls	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800242e:	2b00      	cmp	r3, #0
 8002430:	d07e      	beq.n	8002530 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4798      	blx	r3
        }
        return;
 800243a:	e079      	b.n	8002530 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01d      	beq.n	8002486 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10d      	bne.n	8002474 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245c:	2b00      	cmp	r3, #0
 800245e:	d031      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
 8002468:	e02c      	b.n	80024c4 <HAL_DMA_IRQHandler+0x2a0>
 800246a:	bf00      	nop
 800246c:	20000000 	.word	0x20000000
 8002470:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d023      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4798      	blx	r3
 8002484:	e01e      	b.n	80024c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10f      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0210 	bic.w	r2, r2, #16
 80024a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d032      	beq.n	8002532 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d022      	beq.n	800251e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2205      	movs	r2, #5
 80024dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0201 	bic.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	3301      	adds	r3, #1
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d307      	bcc.n	800250c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f2      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x2cc>
 800250a:	e000      	b.n	800250e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800250c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	4798      	blx	r3
 800252e:	e000      	b.n	8002532 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002530:	bf00      	nop
    }
  }
}
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002554:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b40      	cmp	r3, #64	@ 0x40
 8002564:	d108      	bne.n	8002578 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002576:	e007      	b.n	8002588 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	60da      	str	r2, [r3, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3b10      	subs	r3, #16
 80025a4:	4a14      	ldr	r2, [pc, #80]	@ (80025f8 <DMA_CalcBaseAndBitshift+0x64>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025ae:	4a13      	ldr	r2, [pc, #76]	@ (80025fc <DMA_CalcBaseAndBitshift+0x68>)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d909      	bls.n	80025d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025ca:	f023 0303 	bic.w	r3, r3, #3
 80025ce:	1d1a      	adds	r2, r3, #4
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80025d4:	e007      	b.n	80025e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025de:	f023 0303 	bic.w	r3, r3, #3
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	aaaaaaab 	.word	0xaaaaaaab
 80025fc:	080058a8 	.word	0x080058a8

08002600 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d11f      	bne.n	800265a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d856      	bhi.n	80026ce <DMA_CheckFifoParam+0xce>
 8002620:	a201      	add	r2, pc, #4	@ (adr r2, 8002628 <DMA_CheckFifoParam+0x28>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	08002639 	.word	0x08002639
 800262c:	0800264b 	.word	0x0800264b
 8002630:	08002639 	.word	0x08002639
 8002634:	080026cf 	.word	0x080026cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d046      	beq.n	80026d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002648:	e043      	b.n	80026d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002652:	d140      	bne.n	80026d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002658:	e03d      	b.n	80026d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002662:	d121      	bne.n	80026a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d837      	bhi.n	80026da <DMA_CheckFifoParam+0xda>
 800266a:	a201      	add	r2, pc, #4	@ (adr r2, 8002670 <DMA_CheckFifoParam+0x70>)
 800266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002670:	08002681 	.word	0x08002681
 8002674:	08002687 	.word	0x08002687
 8002678:	08002681 	.word	0x08002681
 800267c:	08002699 	.word	0x08002699
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
      break;
 8002684:	e030      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d025      	beq.n	80026de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002696:	e022      	b.n	80026de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026a0:	d11f      	bne.n	80026e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026a6:	e01c      	b.n	80026e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d903      	bls.n	80026b6 <DMA_CheckFifoParam+0xb6>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d003      	beq.n	80026bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026b4:	e018      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
      break;
 80026ba:	e015      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00e      	beq.n	80026e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      break;
 80026cc:	e00b      	b.n	80026e6 <DMA_CheckFifoParam+0xe6>
      break;
 80026ce:	bf00      	nop
 80026d0:	e00a      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026d2:	bf00      	nop
 80026d4:	e008      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026d6:	bf00      	nop
 80026d8:	e006      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026da:	bf00      	nop
 80026dc:	e004      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026de:	bf00      	nop
 80026e0:	e002      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80026e2:	bf00      	nop
 80026e4:	e000      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026e6:	bf00      	nop
    }
  } 
  
  return status; 
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop

080026f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	@ 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	e159      	b.n	80029c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002714:	2201      	movs	r2, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	429a      	cmp	r2, r3
 800272e:	f040 8148 	bne.w	80029c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d005      	beq.n	800274a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002746:	2b02      	cmp	r3, #2
 8002748:	d130      	bne.n	80027ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002780:	2201      	movs	r2, #1
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 0201 	and.w	r2, r3, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d017      	beq.n	80027e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d123      	bne.n	800283c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	08da      	lsrs	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3208      	adds	r2, #8
 80027fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	220f      	movs	r2, #15
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	08da      	lsrs	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3208      	adds	r2, #8
 8002836:	69b9      	ldr	r1, [r7, #24]
 8002838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0203 	and.w	r2, r3, #3
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a2 	beq.w	80029c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b57      	ldr	r3, [pc, #348]	@ (80029e0 <HAL_GPIO_Init+0x2e8>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	4a56      	ldr	r2, [pc, #344]	@ (80029e0 <HAL_GPIO_Init+0x2e8>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800288c:	6453      	str	r3, [r2, #68]	@ 0x44
 800288e:	4b54      	ldr	r3, [pc, #336]	@ (80029e0 <HAL_GPIO_Init+0x2e8>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800289a:	4a52      	ldr	r2, [pc, #328]	@ (80029e4 <HAL_GPIO_Init+0x2ec>)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	3302      	adds	r3, #2
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	220f      	movs	r2, #15
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a49      	ldr	r2, [pc, #292]	@ (80029e8 <HAL_GPIO_Init+0x2f0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d019      	beq.n	80028fa <HAL_GPIO_Init+0x202>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a48      	ldr	r2, [pc, #288]	@ (80029ec <HAL_GPIO_Init+0x2f4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d013      	beq.n	80028f6 <HAL_GPIO_Init+0x1fe>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a47      	ldr	r2, [pc, #284]	@ (80029f0 <HAL_GPIO_Init+0x2f8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00d      	beq.n	80028f2 <HAL_GPIO_Init+0x1fa>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a46      	ldr	r2, [pc, #280]	@ (80029f4 <HAL_GPIO_Init+0x2fc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <HAL_GPIO_Init+0x1f6>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a45      	ldr	r2, [pc, #276]	@ (80029f8 <HAL_GPIO_Init+0x300>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d101      	bne.n	80028ea <HAL_GPIO_Init+0x1f2>
 80028e6:	2304      	movs	r3, #4
 80028e8:	e008      	b.n	80028fc <HAL_GPIO_Init+0x204>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e006      	b.n	80028fc <HAL_GPIO_Init+0x204>
 80028ee:	2303      	movs	r3, #3
 80028f0:	e004      	b.n	80028fc <HAL_GPIO_Init+0x204>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e002      	b.n	80028fc <HAL_GPIO_Init+0x204>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_GPIO_Init+0x204>
 80028fa:	2300      	movs	r3, #0
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	f002 0203 	and.w	r2, r2, #3
 8002902:	0092      	lsls	r2, r2, #2
 8002904:	4093      	lsls	r3, r2
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800290c:	4935      	ldr	r1, [pc, #212]	@ (80029e4 <HAL_GPIO_Init+0x2ec>)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	3302      	adds	r3, #2
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800291a:	4b38      	ldr	r3, [pc, #224]	@ (80029fc <HAL_GPIO_Init+0x304>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800293e:	4a2f      	ldr	r2, [pc, #188]	@ (80029fc <HAL_GPIO_Init+0x304>)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002944:	4b2d      	ldr	r3, [pc, #180]	@ (80029fc <HAL_GPIO_Init+0x304>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002968:	4a24      	ldr	r2, [pc, #144]	@ (80029fc <HAL_GPIO_Init+0x304>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800296e:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <HAL_GPIO_Init+0x304>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002992:	4a1a      	ldr	r2, [pc, #104]	@ (80029fc <HAL_GPIO_Init+0x304>)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002998:	4b18      	ldr	r3, [pc, #96]	@ (80029fc <HAL_GPIO_Init+0x304>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029bc:	4a0f      	ldr	r2, [pc, #60]	@ (80029fc <HAL_GPIO_Init+0x304>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3301      	adds	r3, #1
 80029c6:	61fb      	str	r3, [r7, #28]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	2b0f      	cmp	r3, #15
 80029cc:	f67f aea2 	bls.w	8002714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	3724      	adds	r7, #36	@ 0x24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40013800 	.word	0x40013800
 80029e8:	40020000 	.word	0x40020000
 80029ec:	40020400 	.word	0x40020400
 80029f0:	40020800 	.word	0x40020800
 80029f4:	40020c00 	.word	0x40020c00
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40013c00 	.word	0x40013c00

08002a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a10:	787b      	ldrb	r3, [r7, #1]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a1c:	e003      	b.n	8002a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	041a      	lsls	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	619a      	str	r2, [r3, #24]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a3e:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a4a:	4a05      	ldr	r2, [pc, #20]	@ (8002a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fb6e 	bl	8001134 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40013c00 	.word	0x40013c00

08002a64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e101      	b.n	8002c7a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d106      	bne.n	8002a96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff f881 	bl	8001b98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2203      	movs	r2, #3
 8002a9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aa4:	d102      	bne.n	8002aac <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 fc13 	bl	80052dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	7c1a      	ldrb	r2, [r3, #16]
 8002abe:	f88d 2000 	strb.w	r2, [sp]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ac6:	f002 fba5 	bl	8005214 <USB_CoreInit>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0ce      	b.n	8002c7a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f002 fc0b 	bl	80052fe <USB_SetCurrentMode>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e0bf      	b.n	8002c7a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	e04a      	b.n	8002b96 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3315      	adds	r3, #21
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	3314      	adds	r3, #20
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	b298      	uxth	r0, r3
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	332e      	adds	r3, #46	@ 0x2e
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3318      	adds	r3, #24
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	331c      	adds	r3, #28
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	3320      	adds	r3, #32
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	3324      	adds	r3, #36	@ 0x24
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	3301      	adds	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	791b      	ldrb	r3, [r3, #4]
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d3af      	bcc.n	8002b00 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	e044      	b.n	8002c30 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	791b      	ldrb	r3, [r3, #4]
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d3b5      	bcc.n	8002ba6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7c1a      	ldrb	r2, [r3, #16]
 8002c42:	f88d 2000 	strb.w	r2, [sp]
 8002c46:	3304      	adds	r3, #4
 8002c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c4a:	f002 fba5 	bl	8005398 <USB_DevInit>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e00c      	b.n	8002c7a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fd6d 	bl	8005752 <USB_DevDisconnect>

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e267      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d075      	beq.n	8002d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ca2:	4b88      	ldr	r3, [pc, #544]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d00c      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cae:	4b85      	ldr	r3, [pc, #532]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d112      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cba:	4b82      	ldr	r3, [pc, #520]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cc6:	d10b      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d05b      	beq.n	8002d8c <HAL_RCC_OscConfig+0x108>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d157      	bne.n	8002d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e242      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce8:	d106      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x74>
 8002cea:	4b76      	ldr	r3, [pc, #472]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a75      	ldr	r2, [pc, #468]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e01d      	b.n	8002d34 <HAL_RCC_OscConfig+0xb0>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x98>
 8002d02:	4b70      	ldr	r3, [pc, #448]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a6f      	ldr	r2, [pc, #444]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a6c      	ldr	r2, [pc, #432]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCC_OscConfig+0xb0>
 8002d1c:	4b69      	ldr	r3, [pc, #420]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a68      	ldr	r2, [pc, #416]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b66      	ldr	r3, [pc, #408]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a65      	ldr	r2, [pc, #404]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7ff f808 	bl	8001d50 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d44:	f7ff f804 	bl	8001d50 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	@ 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e207      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4b5b      	ldr	r3, [pc, #364]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0xc0>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fff4 	bl	8001d50 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fff0 	bl	8001d50 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	@ 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1f3      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	4b51      	ldr	r3, [pc, #324]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0xe8>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d063      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da6:	4b47      	ldr	r3, [pc, #284]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d11c      	bne.n	8002dec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002db2:	4b44      	ldr	r3, [pc, #272]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d116      	bne.n	8002dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbe:	4b41      	ldr	r3, [pc, #260]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x152>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e1c7      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4937      	ldr	r1, [pc, #220]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	e03a      	b.n	8002e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df4:	4b34      	ldr	r3, [pc, #208]	@ (8002ec8 <HAL_RCC_OscConfig+0x244>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7fe ffa9 	bl	8001d50 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e02:	f7fe ffa5 	bl	8001d50 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e1a8      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e14:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	4b28      	ldr	r3, [pc, #160]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4925      	ldr	r1, [pc, #148]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
 8002e34:	e015      	b.n	8002e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e36:	4b24      	ldr	r3, [pc, #144]	@ (8002ec8 <HAL_RCC_OscConfig+0x244>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe ff88 	bl	8001d50 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e44:	f7fe ff84 	bl	8001d50 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e187      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d036      	beq.n	8002edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d016      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e76:	4b15      	ldr	r3, [pc, #84]	@ (8002ecc <HAL_RCC_OscConfig+0x248>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7fe ff68 	bl	8001d50 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e84:	f7fe ff64 	bl	8001d50 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e167      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x200>
 8002ea2:	e01b      	b.n	8002edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea4:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <HAL_RCC_OscConfig+0x248>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe ff51 	bl	8001d50 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb0:	e00e      	b.n	8002ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb2:	f7fe ff4d 	bl	8001d50 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d907      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e150      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	42470000 	.word	0x42470000
 8002ecc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	4b88      	ldr	r3, [pc, #544]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1ea      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8097 	beq.w	8003018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eea:	2300      	movs	r3, #0
 8002eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eee:	4b81      	ldr	r3, [pc, #516]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10f      	bne.n	8002f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	4b7d      	ldr	r3, [pc, #500]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	4a7c      	ldr	r2, [pc, #496]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f16:	2301      	movs	r3, #1
 8002f18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1a:	4b77      	ldr	r3, [pc, #476]	@ (80030f8 <HAL_RCC_OscConfig+0x474>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d118      	bne.n	8002f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f26:	4b74      	ldr	r3, [pc, #464]	@ (80030f8 <HAL_RCC_OscConfig+0x474>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a73      	ldr	r2, [pc, #460]	@ (80030f8 <HAL_RCC_OscConfig+0x474>)
 8002f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f32:	f7fe ff0d 	bl	8001d50 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3a:	f7fe ff09 	bl	8001d50 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e10c      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80030f8 <HAL_RCC_OscConfig+0x474>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d106      	bne.n	8002f6e <HAL_RCC_OscConfig+0x2ea>
 8002f60:	4b64      	ldr	r3, [pc, #400]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f64:	4a63      	ldr	r2, [pc, #396]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f6c:	e01c      	b.n	8002fa8 <HAL_RCC_OscConfig+0x324>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x30c>
 8002f76:	4b5f      	ldr	r3, [pc, #380]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7a:	4a5e      	ldr	r2, [pc, #376]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
 8002f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f82:	4b5c      	ldr	r3, [pc, #368]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f86:	4a5b      	ldr	r2, [pc, #364]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x324>
 8002f90:	4b58      	ldr	r3, [pc, #352]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f94:	4a57      	ldr	r2, [pc, #348]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f96:	f023 0301 	bic.w	r3, r3, #1
 8002f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9c:	4b55      	ldr	r3, [pc, #340]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa0:	4a54      	ldr	r2, [pc, #336]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	f023 0304 	bic.w	r3, r3, #4
 8002fa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d015      	beq.n	8002fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb0:	f7fe fece 	bl	8001d50 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb8:	f7fe feca 	bl	8001d50 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e0cb      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	4b49      	ldr	r3, [pc, #292]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0ee      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x334>
 8002fda:	e014      	b.n	8003006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fdc:	f7fe feb8 	bl	8001d50 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fe feb4 	bl	8001d50 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e0b5      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1ee      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300c:	4b39      	ldr	r3, [pc, #228]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	4a38      	ldr	r2, [pc, #224]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8003012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003016:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80a1 	beq.w	8003164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003022:	4b34      	ldr	r3, [pc, #208]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b08      	cmp	r3, #8
 800302c:	d05c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d141      	bne.n	80030ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	4b31      	ldr	r3, [pc, #196]	@ (80030fc <HAL_RCC_OscConfig+0x478>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fe88 	bl	8001d50 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7fe fe84 	bl	8001d50 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e087      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	4b27      	ldr	r3, [pc, #156]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	019b      	lsls	r3, r3, #6
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	3b01      	subs	r3, #1
 800307c:	041b      	lsls	r3, r3, #16
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003084:	061b      	lsls	r3, r3, #24
 8003086:	491b      	ldr	r1, [pc, #108]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800308c:	4b1b      	ldr	r3, [pc, #108]	@ (80030fc <HAL_RCC_OscConfig+0x478>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003092:	f7fe fe5d 	bl	8001d50 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309a:	f7fe fe59 	bl	8001d50 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e05c      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ac:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x416>
 80030b8:	e054      	b.n	8003164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <HAL_RCC_OscConfig+0x478>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fe46 	bl	8001d50 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fe fe42 	bl	8001d50 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e045      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x444>
 80030e6:	e03d      	b.n	8003164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d107      	bne.n	8003100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e038      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40007000 	.word	0x40007000
 80030fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003100:	4b1b      	ldr	r3, [pc, #108]	@ (8003170 <HAL_RCC_OscConfig+0x4ec>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d028      	beq.n	8003160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d121      	bne.n	8003160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	429a      	cmp	r2, r3
 8003128:	d11a      	bne.n	8003160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003130:	4013      	ands	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003138:	4293      	cmp	r3, r2
 800313a:	d111      	bne.n	8003160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003146:	085b      	lsrs	r3, r3, #1
 8003148:	3b01      	subs	r3, #1
 800314a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d107      	bne.n	8003160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800

08003174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0cc      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003188:	4b68      	ldr	r3, [pc, #416]	@ (800332c <HAL_RCC_ClockConfig+0x1b8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d90c      	bls.n	80031b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003196:	4b65      	ldr	r3, [pc, #404]	@ (800332c <HAL_RCC_ClockConfig+0x1b8>)
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	4b63      	ldr	r3, [pc, #396]	@ (800332c <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0b8      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d020      	beq.n	80031fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c8:	4b59      	ldr	r3, [pc, #356]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a58      	ldr	r2, [pc, #352]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e0:	4b53      	ldr	r3, [pc, #332]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a52      	ldr	r2, [pc, #328]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ec:	4b50      	ldr	r3, [pc, #320]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	494d      	ldr	r1, [pc, #308]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d044      	beq.n	8003294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d107      	bne.n	8003222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	4b47      	ldr	r3, [pc, #284]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d119      	bne.n	8003252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e07f      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d003      	beq.n	8003232 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322e:	2b03      	cmp	r3, #3
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003232:	4b3f      	ldr	r3, [pc, #252]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e06f      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003242:	4b3b      	ldr	r3, [pc, #236]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e067      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003252:	4b37      	ldr	r3, [pc, #220]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f023 0203 	bic.w	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4934      	ldr	r1, [pc, #208]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	4313      	orrs	r3, r2
 8003262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003264:	f7fe fd74 	bl	8001d50 <HAL_GetTick>
 8003268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	e00a      	b.n	8003282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800326c:	f7fe fd70 	bl	8001d50 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e04f      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	4b2b      	ldr	r3, [pc, #172]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 020c 	and.w	r2, r3, #12
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	429a      	cmp	r2, r3
 8003292:	d1eb      	bne.n	800326c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003294:	4b25      	ldr	r3, [pc, #148]	@ (800332c <HAL_RCC_ClockConfig+0x1b8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d20c      	bcs.n	80032bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b22      	ldr	r3, [pc, #136]	@ (800332c <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b20      	ldr	r3, [pc, #128]	@ (800332c <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e032      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c8:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4916      	ldr	r1, [pc, #88]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032e6:	4b12      	ldr	r3, [pc, #72]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	490e      	ldr	r1, [pc, #56]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032fa:	f000 f821 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 80032fe:	4602      	mov	r2, r0
 8003300:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	490a      	ldr	r1, [pc, #40]	@ (8003334 <HAL_RCC_ClockConfig+0x1c0>)
 800330c:	5ccb      	ldrb	r3, [r1, r3]
 800330e:	fa22 f303 	lsr.w	r3, r2, r3
 8003312:	4a09      	ldr	r2, [pc, #36]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 8003314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003316:	4b09      	ldr	r3, [pc, #36]	@ (800333c <HAL_RCC_ClockConfig+0x1c8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fcd4 	bl	8001cc8 <HAL_InitTick>

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40023c00 	.word	0x40023c00
 8003330:	40023800 	.word	0x40023800
 8003334:	08005898 	.word	0x08005898
 8003338:	20000000 	.word	0x20000000
 800333c:	20000004 	.word	0x20000004

08003340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003344:	b090      	sub	sp, #64	@ 0x40
 8003346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003358:	4b59      	ldr	r3, [pc, #356]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b08      	cmp	r3, #8
 8003362:	d00d      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x40>
 8003364:	2b08      	cmp	r3, #8
 8003366:	f200 80a1 	bhi.w	80034ac <HAL_RCC_GetSysClockFreq+0x16c>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0x34>
 800336e:	2b04      	cmp	r3, #4
 8003370:	d003      	beq.n	800337a <HAL_RCC_GetSysClockFreq+0x3a>
 8003372:	e09b      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003374:	4b53      	ldr	r3, [pc, #332]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003376:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003378:	e09b      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800337a:	4b53      	ldr	r3, [pc, #332]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800337c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800337e:	e098      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003380:	4b4f      	ldr	r3, [pc, #316]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003388:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800338a:	4b4d      	ldr	r3, [pc, #308]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d028      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003396:	4b4a      	ldr	r3, [pc, #296]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	099b      	lsrs	r3, r3, #6
 800339c:	2200      	movs	r2, #0
 800339e:	623b      	str	r3, [r7, #32]
 80033a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033a8:	2100      	movs	r1, #0
 80033aa:	4b47      	ldr	r3, [pc, #284]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80033ac:	fb03 f201 	mul.w	r2, r3, r1
 80033b0:	2300      	movs	r3, #0
 80033b2:	fb00 f303 	mul.w	r3, r0, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	4a43      	ldr	r2, [pc, #268]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80033ba:	fba0 1202 	umull	r1, r2, r0, r2
 80033be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033c0:	460a      	mov	r2, r1
 80033c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80033c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033c6:	4413      	add	r3, r2
 80033c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033cc:	2200      	movs	r2, #0
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	61fa      	str	r2, [r7, #28]
 80033d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80033da:	f7fc fefb 	bl	80001d4 <__aeabi_uldivmod>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4613      	mov	r3, r2
 80033e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033e6:	e053      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e8:	4b35      	ldr	r3, [pc, #212]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	2200      	movs	r2, #0
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	617a      	str	r2, [r7, #20]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033fa:	f04f 0b00 	mov.w	fp, #0
 80033fe:	4652      	mov	r2, sl
 8003400:	465b      	mov	r3, fp
 8003402:	f04f 0000 	mov.w	r0, #0
 8003406:	f04f 0100 	mov.w	r1, #0
 800340a:	0159      	lsls	r1, r3, #5
 800340c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003410:	0150      	lsls	r0, r2, #5
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	ebb2 080a 	subs.w	r8, r2, sl
 800341a:	eb63 090b 	sbc.w	r9, r3, fp
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800342a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800342e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003432:	ebb2 0408 	subs.w	r4, r2, r8
 8003436:	eb63 0509 	sbc.w	r5, r3, r9
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	00eb      	lsls	r3, r5, #3
 8003444:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003448:	00e2      	lsls	r2, r4, #3
 800344a:	4614      	mov	r4, r2
 800344c:	461d      	mov	r5, r3
 800344e:	eb14 030a 	adds.w	r3, r4, sl
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	eb45 030b 	adc.w	r3, r5, fp
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003466:	4629      	mov	r1, r5
 8003468:	028b      	lsls	r3, r1, #10
 800346a:	4621      	mov	r1, r4
 800346c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003470:	4621      	mov	r1, r4
 8003472:	028a      	lsls	r2, r1, #10
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347a:	2200      	movs	r2, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	60fa      	str	r2, [r7, #12]
 8003480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003484:	f7fc fea6 	bl	80001d4 <__aeabi_uldivmod>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4613      	mov	r3, r2
 800348e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003490:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	3301      	adds	r3, #1
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80034a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034aa:	e002      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034ac:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3740      	adds	r7, #64	@ 0x40
 80034b8:	46bd      	mov	sp, r7
 80034ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	00f42400 	.word	0x00f42400
 80034c8:	017d7840 	.word	0x017d7840

080034cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e07b      	b.n	80035d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d108      	bne.n	80034f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ee:	d009      	beq.n	8003504 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	61da      	str	r2, [r3, #28]
 80034f6:	e005      	b.n	8003504 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe f8fe 	bl	8001720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800353a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003588:	ea42 0103 	orr.w	r1, r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	0c1b      	lsrs	r3, r3, #16
 80035a2:	f003 0104 	and.w	r1, r3, #4
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	f003 0210 	and.w	r2, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69da      	ldr	r2, [r3, #28]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b088      	sub	sp, #32
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035ee:	f7fe fbaf 	bl	8001d50 <HAL_GetTick>
 80035f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d001      	beq.n	8003608 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
 8003606:	e12a      	b.n	800385e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_SPI_Transmit+0x36>
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e122      	b.n	800385e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_SPI_Transmit+0x48>
 8003622:	2302      	movs	r3, #2
 8003624:	e11b      	b.n	800385e <HAL_SPI_Transmit+0x280>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2203      	movs	r2, #3
 8003632:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	88fa      	ldrh	r2, [r7, #6]
 8003646:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	88fa      	ldrh	r2, [r7, #6]
 800364c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003674:	d10f      	bne.n	8003696 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003684:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003694:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a0:	2b40      	cmp	r3, #64	@ 0x40
 80036a2:	d007      	beq.n	80036b4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036bc:	d152      	bne.n	8003764 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <HAL_SPI_Transmit+0xee>
 80036c6:	8b7b      	ldrh	r3, [r7, #26]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d145      	bne.n	8003758 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d0:	881a      	ldrh	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036dc:	1c9a      	adds	r2, r3, #2
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036f0:	e032      	b.n	8003758 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d112      	bne.n	8003726 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	881a      	ldrh	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003710:	1c9a      	adds	r2, r3, #2
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003724:	e018      	b.n	8003758 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003726:	f7fe fb13 	bl	8001d50 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d803      	bhi.n	800373e <HAL_SPI_Transmit+0x160>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d102      	bne.n	8003744 <HAL_SPI_Transmit+0x166>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e082      	b.n	800385e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1c7      	bne.n	80036f2 <HAL_SPI_Transmit+0x114>
 8003762:	e053      	b.n	800380c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_SPI_Transmit+0x194>
 800376c:	8b7b      	ldrh	r3, [r7, #26]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d147      	bne.n	8003802 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	7812      	ldrb	r2, [r2, #0]
 800377e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003798:	e033      	b.n	8003802 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d113      	bne.n	80037d0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	7812      	ldrb	r2, [r2, #0]
 80037b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80037ce:	e018      	b.n	8003802 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037d0:	f7fe fabe 	bl	8001d50 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d803      	bhi.n	80037e8 <HAL_SPI_Transmit+0x20a>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d102      	bne.n	80037ee <HAL_SPI_Transmit+0x210>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e02d      	b.n	800385e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1c6      	bne.n	800379a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	6839      	ldr	r1, [r7, #0]
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fbd9 	bl	8003fc8 <SPI_EndRxTxTransaction>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800385c:	2300      	movs	r3, #0
  }
}
 800385e:	4618      	mov	r0, r3
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b088      	sub	sp, #32
 800386a:	af02      	add	r7, sp, #8
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	4613      	mov	r3, r2
 8003874:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d001      	beq.n	8003886 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003882:	2302      	movs	r3, #2
 8003884:	e104      	b.n	8003a90 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800388e:	d112      	bne.n	80038b6 <HAL_SPI_Receive+0x50>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10e      	bne.n	80038b6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2204      	movs	r2, #4
 800389c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038a0:	88fa      	ldrh	r2, [r7, #6]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f8f3 	bl	8003a98 <HAL_SPI_TransmitReceive>
 80038b2:	4603      	mov	r3, r0
 80038b4:	e0ec      	b.n	8003a90 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038b6:	f7fe fa4b 	bl	8001d50 <HAL_GetTick>
 80038ba:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_SPI_Receive+0x62>
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0e1      	b.n	8003a90 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_SPI_Receive+0x74>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e0da      	b.n	8003a90 <HAL_SPI_Receive+0x22a>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2204      	movs	r2, #4
 80038e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	88fa      	ldrh	r2, [r7, #6]
 80038fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	88fa      	ldrh	r2, [r7, #6]
 8003900:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003928:	d10f      	bne.n	800394a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003938:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003948:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003954:	2b40      	cmp	r3, #64	@ 0x40
 8003956:	d007      	beq.n	8003968 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003966:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d170      	bne.n	8003a52 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003970:	e035      	b.n	80039de <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d115      	bne.n	80039ac <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f103 020c 	add.w	r2, r3, #12
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	7812      	ldrb	r2, [r2, #0]
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039aa:	e018      	b.n	80039de <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ac:	f7fe f9d0 	bl	8001d50 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d803      	bhi.n	80039c4 <HAL_SPI_Receive+0x15e>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c2:	d102      	bne.n	80039ca <HAL_SPI_Receive+0x164>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e058      	b.n	8003a90 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1c4      	bne.n	8003972 <HAL_SPI_Receive+0x10c>
 80039e8:	e038      	b.n	8003a5c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d113      	bne.n	8003a20 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a02:	b292      	uxth	r2, r2
 8003a04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0a:	1c9a      	adds	r2, r3, #2
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a1e:	e018      	b.n	8003a52 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a20:	f7fe f996 	bl	8001d50 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d803      	bhi.n	8003a38 <HAL_SPI_Receive+0x1d2>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a36:	d102      	bne.n	8003a3e <HAL_SPI_Receive+0x1d8>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e01e      	b.n	8003a90 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1c6      	bne.n	80039ea <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	6839      	ldr	r1, [r7, #0]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fa4b 	bl	8003efc <SPI_EndRxTransaction>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	@ 0x28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aaa:	f7fe f951 	bl	8001d50 <HAL_GetTick>
 8003aae:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ab6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003abe:	887b      	ldrh	r3, [r7, #2]
 8003ac0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ac2:	7ffb      	ldrb	r3, [r7, #31]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d00c      	beq.n	8003ae2 <HAL_SPI_TransmitReceive+0x4a>
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ace:	d106      	bne.n	8003ade <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d102      	bne.n	8003ade <HAL_SPI_TransmitReceive+0x46>
 8003ad8:	7ffb      	ldrb	r3, [r7, #31]
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d001      	beq.n	8003ae2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e17f      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x5c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x5c>
 8003aee:	887b      	ldrh	r3, [r7, #2]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e174      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_SPI_TransmitReceive+0x6e>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e16d      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x34a>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d003      	beq.n	8003b22 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2205      	movs	r2, #5
 8003b1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	887a      	ldrh	r2, [r7, #2]
 8003b32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	887a      	ldrh	r2, [r7, #2]
 8003b38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	887a      	ldrh	r2, [r7, #2]
 8003b44:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	887a      	ldrh	r2, [r7, #2]
 8003b4a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b62:	2b40      	cmp	r3, #64	@ 0x40
 8003b64:	d007      	beq.n	8003b76 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b7e:	d17e      	bne.n	8003c7e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_SPI_TransmitReceive+0xf6>
 8003b88:	8afb      	ldrh	r3, [r7, #22]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d16c      	bne.n	8003c68 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	881a      	ldrh	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	1c9a      	adds	r2, r3, #2
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb2:	e059      	b.n	8003c68 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d11b      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x162>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d016      	beq.n	8003bfa <HAL_SPI_TransmitReceive+0x162>
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d113      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd6:	881a      	ldrh	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	1c9a      	adds	r2, r3, #2
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d119      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x1a4>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d014      	beq.n	8003c3c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c24:	1c9a      	adds	r2, r3, #2
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c3c:	f7fe f888 	bl	8001d50 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d80d      	bhi.n	8003c68 <HAL_SPI_TransmitReceive+0x1d0>
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d009      	beq.n	8003c68 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e0bc      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1a0      	bne.n	8003bb4 <HAL_SPI_TransmitReceive+0x11c>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d19b      	bne.n	8003bb4 <HAL_SPI_TransmitReceive+0x11c>
 8003c7c:	e082      	b.n	8003d84 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_SPI_TransmitReceive+0x1f4>
 8003c86:	8afb      	ldrh	r3, [r7, #22]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d171      	bne.n	8003d70 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	330c      	adds	r3, #12
 8003c96:	7812      	ldrb	r2, [r2, #0]
 8003c98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cb2:	e05d      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d11c      	bne.n	8003cfc <HAL_SPI_TransmitReceive+0x264>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d017      	beq.n	8003cfc <HAL_SPI_TransmitReceive+0x264>
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d114      	bne.n	8003cfc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	7812      	ldrb	r2, [r2, #0]
 8003cde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d119      	bne.n	8003d3e <HAL_SPI_TransmitReceive+0x2a6>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d014      	beq.n	8003d3e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d3e:	f7fe f807 	bl	8001d50 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d803      	bhi.n	8003d56 <HAL_SPI_TransmitReceive+0x2be>
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d102      	bne.n	8003d5c <HAL_SPI_TransmitReceive+0x2c4>
 8003d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d109      	bne.n	8003d70 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e038      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d19c      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x21c>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d197      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d84:	6a3a      	ldr	r2, [r7, #32]
 8003d86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f91d 	bl	8003fc8 <SPI_EndRxTxTransaction>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e01d      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10a      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003de0:	2300      	movs	r3, #0
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3728      	adds	r7, #40	@ 0x28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dfc:	f7fd ffa8 	bl	8001d50 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	4413      	add	r3, r2
 8003e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e0c:	f7fd ffa0 	bl	8001d50 <HAL_GetTick>
 8003e10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e12:	4b39      	ldr	r3, [pc, #228]	@ (8003ef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	015b      	lsls	r3, r3, #5
 8003e18:	0d1b      	lsrs	r3, r3, #20
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e22:	e054      	b.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d050      	beq.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e2c:	f7fd ff90 	bl	8001d50 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d902      	bls.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d13d      	bne.n	8003ebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e5a:	d111      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e64:	d004      	beq.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e6e:	d107      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e88:	d10f      	bne.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e017      	b.n	8003eee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d19b      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000000 	.word	0x20000000

08003efc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f10:	d111      	bne.n	8003f36 <SPI_EndRxTransaction+0x3a>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f1a:	d004      	beq.n	8003f26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f24:	d107      	bne.n	8003f36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f3e:	d12a      	bne.n	8003f96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f48:	d012      	beq.n	8003f70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2200      	movs	r2, #0
 8003f52:	2180      	movs	r1, #128	@ 0x80
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff ff49 	bl	8003dec <SPI_WaitFlagStateUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d02d      	beq.n	8003fbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e026      	b.n	8003fbe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2200      	movs	r2, #0
 8003f78:	2101      	movs	r1, #1
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f7ff ff36 	bl	8003dec <SPI_WaitFlagStateUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d01a      	beq.n	8003fbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e013      	b.n	8003fbe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7ff ff23 	bl	8003dec <SPI_WaitFlagStateUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb0:	f043 0220 	orr.w	r2, r3, #32
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e000      	b.n	8003fbe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	2102      	movs	r1, #2
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff ff04 	bl	8003dec <SPI_WaitFlagStateUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fee:	f043 0220 	orr.w	r2, r3, #32
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e032      	b.n	8004060 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8004068 <SPI_EndRxTxTransaction+0xa0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800406c <SPI_EndRxTxTransaction+0xa4>)
 8004000:	fba2 2303 	umull	r2, r3, r2, r3
 8004004:	0d5b      	lsrs	r3, r3, #21
 8004006:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004018:	d112      	bne.n	8004040 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2200      	movs	r2, #0
 8004022:	2180      	movs	r1, #128	@ 0x80
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff fee1 	bl	8003dec <SPI_WaitFlagStateUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d016      	beq.n	800405e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e00f      	b.n	8004060 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	3b01      	subs	r3, #1
 800404a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004056:	2b80      	cmp	r3, #128	@ 0x80
 8004058:	d0f2      	beq.n	8004040 <SPI_EndRxTxTransaction+0x78>
 800405a:	e000      	b.n	800405e <SPI_EndRxTxTransaction+0x96>
        break;
 800405c:	bf00      	nop
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20000000 	.word	0x20000000
 800406c:	165e9f81 	.word	0x165e9f81

08004070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e041      	b.n	8004106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd fcc2 	bl	8001a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f000 fd6a 	bl	8004b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e041      	b.n	80041a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f839 	bl	80041ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2202      	movs	r2, #2
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f000 fd1b 	bl	8004b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_TIM_PWM_Start_DMA+0x2c>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e022      	b.n	8004232 <HAL_TIM_PWM_Start_DMA+0x72>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d109      	bne.n	8004206 <HAL_TIM_PWM_Start_DMA+0x46>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	bf0c      	ite	eq
 80041fe:	2301      	moveq	r3, #1
 8004200:	2300      	movne	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	e015      	b.n	8004232 <HAL_TIM_PWM_Start_DMA+0x72>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d109      	bne.n	8004220 <HAL_TIM_PWM_Start_DMA+0x60>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	bf0c      	ite	eq
 8004218:	2301      	moveq	r3, #1
 800421a:	2300      	movne	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e008      	b.n	8004232 <HAL_TIM_PWM_Start_DMA+0x72>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	bf0c      	ite	eq
 800422c:	2301      	moveq	r3, #1
 800422e:	2300      	movne	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
 8004238:	e15d      	b.n	80044f6 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <HAL_TIM_PWM_Start_DMA+0x94>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e022      	b.n	800429a <HAL_TIM_PWM_Start_DMA+0xda>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b04      	cmp	r3, #4
 8004258:	d109      	bne.n	800426e <HAL_TIM_PWM_Start_DMA+0xae>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b01      	cmp	r3, #1
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e015      	b.n	800429a <HAL_TIM_PWM_Start_DMA+0xda>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d109      	bne.n	8004288 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	e008      	b.n	800429a <HAL_TIM_PWM_Start_DMA+0xda>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b01      	cmp	r3, #1
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d024      	beq.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_TIM_PWM_Start_DMA+0xea>
 80042a4:	887b      	ldrh	r3, [r7, #2]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e123      	b.n	80044f6 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start_DMA+0xfe>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042bc:	e016      	b.n	80042ec <HAL_TIM_PWM_Start_DMA+0x12c>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start_DMA+0x10e>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042cc:	e00e      	b.n	80042ec <HAL_TIM_PWM_Start_DMA+0x12c>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Start_DMA+0x11e>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042dc:	e006      	b.n	80042ec <HAL_TIM_PWM_Start_DMA+0x12c>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2202      	movs	r2, #2
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042e6:	e001      	b.n	80042ec <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e104      	b.n	80044f6 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	f200 80ae 	bhi.w	8004450 <HAL_TIM_PWM_Start_DMA+0x290>
 80042f4:	a201      	add	r2, pc, #4	@ (adr r2, 80042fc <HAL_TIM_PWM_Start_DMA+0x13c>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	08004331 	.word	0x08004331
 8004300:	08004451 	.word	0x08004451
 8004304:	08004451 	.word	0x08004451
 8004308:	08004451 	.word	0x08004451
 800430c:	08004379 	.word	0x08004379
 8004310:	08004451 	.word	0x08004451
 8004314:	08004451 	.word	0x08004451
 8004318:	08004451 	.word	0x08004451
 800431c:	080043c1 	.word	0x080043c1
 8004320:	08004451 	.word	0x08004451
 8004324:	08004451 	.word	0x08004451
 8004328:	08004451 	.word	0x08004451
 800432c:	08004409 	.word	0x08004409
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	4a72      	ldr	r2, [pc, #456]	@ (8004500 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004336:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	4a71      	ldr	r2, [pc, #452]	@ (8004504 <HAL_TIM_PWM_Start_DMA+0x344>)
 800433e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	4a70      	ldr	r2, [pc, #448]	@ (8004508 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004346:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3334      	adds	r3, #52	@ 0x34
 8004354:	461a      	mov	r2, r3
 8004356:	887b      	ldrh	r3, [r7, #2]
 8004358:	f7fd feea 	bl	8002130 <HAL_DMA_Start_IT>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e0c7      	b.n	80044f6 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004374:	60da      	str	r2, [r3, #12]
      break;
 8004376:	e06e      	b.n	8004456 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437c:	4a60      	ldr	r2, [pc, #384]	@ (8004500 <HAL_TIM_PWM_Start_DMA+0x340>)
 800437e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004384:	4a5f      	ldr	r2, [pc, #380]	@ (8004504 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438c:	4a5e      	ldr	r2, [pc, #376]	@ (8004508 <HAL_TIM_PWM_Start_DMA+0x348>)
 800438e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3338      	adds	r3, #56	@ 0x38
 800439c:	461a      	mov	r2, r3
 800439e:	887b      	ldrh	r3, [r7, #2]
 80043a0:	f7fd fec6 	bl	8002130 <HAL_DMA_Start_IT>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e0a3      	b.n	80044f6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043bc:	60da      	str	r2, [r3, #12]
      break;
 80043be:	e04a      	b.n	8004456 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	4a4e      	ldr	r2, [pc, #312]	@ (8004500 <HAL_TIM_PWM_Start_DMA+0x340>)
 80043c6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	4a4d      	ldr	r2, [pc, #308]	@ (8004504 <HAL_TIM_PWM_Start_DMA+0x344>)
 80043ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	4a4c      	ldr	r2, [pc, #304]	@ (8004508 <HAL_TIM_PWM_Start_DMA+0x348>)
 80043d6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	333c      	adds	r3, #60	@ 0x3c
 80043e4:	461a      	mov	r2, r3
 80043e6:	887b      	ldrh	r3, [r7, #2]
 80043e8:	f7fd fea2 	bl	8002130 <HAL_DMA_Start_IT>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e07f      	b.n	80044f6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004404:	60da      	str	r2, [r3, #12]
      break;
 8004406:	e026      	b.n	8004456 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	4a3c      	ldr	r2, [pc, #240]	@ (8004500 <HAL_TIM_PWM_Start_DMA+0x340>)
 800440e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	4a3b      	ldr	r2, [pc, #236]	@ (8004504 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004416:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441c:	4a3a      	ldr	r2, [pc, #232]	@ (8004508 <HAL_TIM_PWM_Start_DMA+0x348>)
 800441e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3340      	adds	r3, #64	@ 0x40
 800442c:	461a      	mov	r2, r3
 800442e:	887b      	ldrh	r3, [r7, #2]
 8004430:	f7fd fe7e 	bl	8002130 <HAL_DMA_Start_IT>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e05b      	b.n	80044f6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800444c:	60da      	str	r2, [r3, #12]
      break;
 800444e:	e002      	b.n	8004456 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	75fb      	strb	r3, [r7, #23]
      break;
 8004454:	bf00      	nop
  }

  if (status == HAL_OK)
 8004456:	7dfb      	ldrb	r3, [r7, #23]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d14b      	bne.n	80044f4 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2201      	movs	r2, #1
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fe41 	bl	80050ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a27      	ldr	r2, [pc, #156]	@ (800450c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d107      	bne.n	8004484 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004482:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a20      	ldr	r2, [pc, #128]	@ (800450c <HAL_TIM_PWM_Start_DMA+0x34c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d018      	beq.n	80044c0 <HAL_TIM_PWM_Start_DMA+0x300>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004496:	d013      	beq.n	80044c0 <HAL_TIM_PWM_Start_DMA+0x300>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1c      	ldr	r2, [pc, #112]	@ (8004510 <HAL_TIM_PWM_Start_DMA+0x350>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00e      	beq.n	80044c0 <HAL_TIM_PWM_Start_DMA+0x300>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004514 <HAL_TIM_PWM_Start_DMA+0x354>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d009      	beq.n	80044c0 <HAL_TIM_PWM_Start_DMA+0x300>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a19      	ldr	r2, [pc, #100]	@ (8004518 <HAL_TIM_PWM_Start_DMA+0x358>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d004      	beq.n	80044c0 <HAL_TIM_PWM_Start_DMA+0x300>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a18      	ldr	r2, [pc, #96]	@ (800451c <HAL_TIM_PWM_Start_DMA+0x35c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d111      	bne.n	80044e4 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b06      	cmp	r3, #6
 80044d0:	d010      	beq.n	80044f4 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0201 	orr.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e2:	e007      	b.n	80044f4 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	08004a79 	.word	0x08004a79
 8004504:	08004b21 	.word	0x08004b21
 8004508:	080049e7 	.word	0x080049e7
 800450c:	40010000 	.word	0x40010000
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800
 8004518:	40000c00 	.word	0x40000c00
 800451c:	40014000 	.word	0x40014000

08004520 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b0c      	cmp	r3, #12
 8004532:	d855      	bhi.n	80045e0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004534:	a201      	add	r2, pc, #4	@ (adr r2, 800453c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453a:	bf00      	nop
 800453c:	08004571 	.word	0x08004571
 8004540:	080045e1 	.word	0x080045e1
 8004544:	080045e1 	.word	0x080045e1
 8004548:	080045e1 	.word	0x080045e1
 800454c:	0800458d 	.word	0x0800458d
 8004550:	080045e1 	.word	0x080045e1
 8004554:	080045e1 	.word	0x080045e1
 8004558:	080045e1 	.word	0x080045e1
 800455c:	080045a9 	.word	0x080045a9
 8004560:	080045e1 	.word	0x080045e1
 8004564:	080045e1 	.word	0x080045e1
 8004568:	080045e1 	.word	0x080045e1
 800456c:	080045c5 	.word	0x080045c5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800457e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004584:	4618      	mov	r0, r3
 8004586:	f7fd fe2b 	bl	80021e0 <HAL_DMA_Abort_IT>
      break;
 800458a:	e02c      	b.n	80045e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800459a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fd fe1d 	bl	80021e0 <HAL_DMA_Abort_IT>
      break;
 80045a6:	e01e      	b.n	80045e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fd fe0f 	bl	80021e0 <HAL_DMA_Abort_IT>
      break;
 80045c2:	e010      	b.n	80045e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fd fe01 	bl	80021e0 <HAL_DMA_Abort_IT>
      break;
 80045de:	e002      	b.n	80045e6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
      break;
 80045e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d157      	bne.n	800469c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	6839      	ldr	r1, [r7, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fd79 	bl	80050ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2a      	ldr	r2, [pc, #168]	@ (80046a8 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d117      	bne.n	8004634 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6a1a      	ldr	r2, [r3, #32]
 800460a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10f      	bne.n	8004634 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6a1a      	ldr	r2, [r3, #32]
 800461a:	f240 4344 	movw	r3, #1092	@ 0x444
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d107      	bne.n	8004634 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004632:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6a1a      	ldr	r2, [r3, #32]
 800463a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10f      	bne.n	8004664 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6a1a      	ldr	r2, [r3, #32]
 800464a:	f240 4344 	movw	r3, #1092	@ 0x444
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d107      	bne.n	8004664 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d104      	bne.n	8004674 <HAL_TIM_PWM_Stop_DMA+0x154>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004672:	e013      	b.n	800469c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b04      	cmp	r3, #4
 8004678:	d104      	bne.n	8004684 <HAL_TIM_PWM_Stop_DMA+0x164>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004682:	e00b      	b.n	800469c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b08      	cmp	r3, #8
 8004688:	d104      	bne.n	8004694 <HAL_TIM_PWM_Stop_DMA+0x174>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004692:	e003      	b.n	800469c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800469c:	7bfb      	ldrb	r3, [r7, #15]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40010000 	.word	0x40010000

080046ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e0ae      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b0c      	cmp	r3, #12
 80046d6:	f200 809f 	bhi.w	8004818 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046da:	a201      	add	r2, pc, #4	@ (adr r2, 80046e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	08004715 	.word	0x08004715
 80046e4:	08004819 	.word	0x08004819
 80046e8:	08004819 	.word	0x08004819
 80046ec:	08004819 	.word	0x08004819
 80046f0:	08004755 	.word	0x08004755
 80046f4:	08004819 	.word	0x08004819
 80046f8:	08004819 	.word	0x08004819
 80046fc:	08004819 	.word	0x08004819
 8004700:	08004797 	.word	0x08004797
 8004704:	08004819 	.word	0x08004819
 8004708:	08004819 	.word	0x08004819
 800470c:	08004819 	.word	0x08004819
 8004710:	080047d7 	.word	0x080047d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fac0 	bl	8004ca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0208 	orr.w	r2, r2, #8
 800472e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0204 	bic.w	r2, r2, #4
 800473e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6999      	ldr	r1, [r3, #24]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	619a      	str	r2, [r3, #24]
      break;
 8004752:	e064      	b.n	800481e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fb06 	bl	8004d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800476e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800477e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6999      	ldr	r1, [r3, #24]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	021a      	lsls	r2, r3, #8
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	619a      	str	r2, [r3, #24]
      break;
 8004794:	e043      	b.n	800481e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fb51 	bl	8004e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0208 	orr.w	r2, r2, #8
 80047b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0204 	bic.w	r2, r2, #4
 80047c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69d9      	ldr	r1, [r3, #28]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	61da      	str	r2, [r3, #28]
      break;
 80047d4:	e023      	b.n	800481e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fb9b 	bl	8004f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69d9      	ldr	r1, [r3, #28]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	021a      	lsls	r2, r3, #8
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	61da      	str	r2, [r3, #28]
      break;
 8004816:	e002      	b.n	800481e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	75fb      	strb	r3, [r7, #23]
      break;
 800481c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004826:	7dfb      	ldrb	r3, [r7, #23]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_TIM_ConfigClockSource+0x1c>
 8004848:	2302      	movs	r3, #2
 800484a:	e0b4      	b.n	80049b6 <HAL_TIM_ConfigClockSource+0x186>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800486a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004884:	d03e      	beq.n	8004904 <HAL_TIM_ConfigClockSource+0xd4>
 8004886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800488a:	f200 8087 	bhi.w	800499c <HAL_TIM_ConfigClockSource+0x16c>
 800488e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004892:	f000 8086 	beq.w	80049a2 <HAL_TIM_ConfigClockSource+0x172>
 8004896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800489a:	d87f      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 800489c:	2b70      	cmp	r3, #112	@ 0x70
 800489e:	d01a      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0xa6>
 80048a0:	2b70      	cmp	r3, #112	@ 0x70
 80048a2:	d87b      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 80048a4:	2b60      	cmp	r3, #96	@ 0x60
 80048a6:	d050      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x11a>
 80048a8:	2b60      	cmp	r3, #96	@ 0x60
 80048aa:	d877      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 80048ac:	2b50      	cmp	r3, #80	@ 0x50
 80048ae:	d03c      	beq.n	800492a <HAL_TIM_ConfigClockSource+0xfa>
 80048b0:	2b50      	cmp	r3, #80	@ 0x50
 80048b2:	d873      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 80048b4:	2b40      	cmp	r3, #64	@ 0x40
 80048b6:	d058      	beq.n	800496a <HAL_TIM_ConfigClockSource+0x13a>
 80048b8:	2b40      	cmp	r3, #64	@ 0x40
 80048ba:	d86f      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 80048bc:	2b30      	cmp	r3, #48	@ 0x30
 80048be:	d064      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x15a>
 80048c0:	2b30      	cmp	r3, #48	@ 0x30
 80048c2:	d86b      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d060      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x15a>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d867      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d05c      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x15a>
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d05a      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x15a>
 80048d4:	e062      	b.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048e6:	f000 fbe1 	bl	80050ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	609a      	str	r2, [r3, #8]
      break;
 8004902:	e04f      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004914:	f000 fbca 	bl	80050ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004926:	609a      	str	r2, [r3, #8]
      break;
 8004928:	e03c      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004936:	461a      	mov	r2, r3
 8004938:	f000 fb3e 	bl	8004fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2150      	movs	r1, #80	@ 0x50
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fb97 	bl	8005076 <TIM_ITRx_SetConfig>
      break;
 8004948:	e02c      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004956:	461a      	mov	r2, r3
 8004958:	f000 fb5d 	bl	8005016 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2160      	movs	r1, #96	@ 0x60
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fb87 	bl	8005076 <TIM_ITRx_SetConfig>
      break;
 8004968:	e01c      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004976:	461a      	mov	r2, r3
 8004978:	f000 fb1e 	bl	8004fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2140      	movs	r1, #64	@ 0x40
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fb77 	bl	8005076 <TIM_ITRx_SetConfig>
      break;
 8004988:	e00c      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f000 fb6e 	bl	8005076 <TIM_ITRx_SetConfig>
      break;
 800499a:	e003      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
      break;
 80049a0:	e000      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d107      	bne.n	8004a0e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a0c:	e02a      	b.n	8004a64 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d107      	bne.n	8004a28 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a26:	e01d      	b.n	8004a64 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d107      	bne.n	8004a42 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2204      	movs	r2, #4
 8004a36:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a40:	e010      	b.n	8004a64 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d107      	bne.n	8004a5c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2208      	movs	r2, #8
 8004a50:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a5a:	e003      	b.n	8004a64 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff ffb4 	bl	80049d2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a84:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d10b      	bne.n	8004aa8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d136      	bne.n	8004b0c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aa6:	e031      	b.n	8004b0c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d10b      	bne.n	8004aca <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d125      	bne.n	8004b0c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ac8:	e020      	b.n	8004b0c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d10b      	bne.n	8004aec <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d114      	bne.n	8004b0c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aea:	e00f      	b.n	8004b0c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d10a      	bne.n	8004b0c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2208      	movs	r2, #8
 8004afa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d103      	bne.n	8004b0c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7fc fd1f 	bl	8001550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
}
 8004b18:	bf00      	nop
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d103      	bne.n	8004b40 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	771a      	strb	r2, [r3, #28]
 8004b3e:	e019      	b.n	8004b74 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d103      	bne.n	8004b52 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	771a      	strb	r2, [r3, #28]
 8004b50:	e010      	b.n	8004b74 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d103      	bne.n	8004b64 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2204      	movs	r2, #4
 8004b60:	771a      	strb	r2, [r3, #28]
 8004b62:	e007      	b.n	8004b74 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d102      	bne.n	8004b74 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2208      	movs	r2, #8
 8004b72:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7ff ff22 	bl	80049be <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a3a      	ldr	r2, [pc, #232]	@ (8004c84 <TIM_Base_SetConfig+0xfc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00f      	beq.n	8004bc0 <TIM_Base_SetConfig+0x38>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba6:	d00b      	beq.n	8004bc0 <TIM_Base_SetConfig+0x38>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a37      	ldr	r2, [pc, #220]	@ (8004c88 <TIM_Base_SetConfig+0x100>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d007      	beq.n	8004bc0 <TIM_Base_SetConfig+0x38>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a36      	ldr	r2, [pc, #216]	@ (8004c8c <TIM_Base_SetConfig+0x104>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_Base_SetConfig+0x38>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a35      	ldr	r2, [pc, #212]	@ (8004c90 <TIM_Base_SetConfig+0x108>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d108      	bne.n	8004bd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8004c84 <TIM_Base_SetConfig+0xfc>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01b      	beq.n	8004c12 <TIM_Base_SetConfig+0x8a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be0:	d017      	beq.n	8004c12 <TIM_Base_SetConfig+0x8a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a28      	ldr	r2, [pc, #160]	@ (8004c88 <TIM_Base_SetConfig+0x100>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <TIM_Base_SetConfig+0x8a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a27      	ldr	r2, [pc, #156]	@ (8004c8c <TIM_Base_SetConfig+0x104>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00f      	beq.n	8004c12 <TIM_Base_SetConfig+0x8a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a26      	ldr	r2, [pc, #152]	@ (8004c90 <TIM_Base_SetConfig+0x108>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00b      	beq.n	8004c12 <TIM_Base_SetConfig+0x8a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a25      	ldr	r2, [pc, #148]	@ (8004c94 <TIM_Base_SetConfig+0x10c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d007      	beq.n	8004c12 <TIM_Base_SetConfig+0x8a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a24      	ldr	r2, [pc, #144]	@ (8004c98 <TIM_Base_SetConfig+0x110>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <TIM_Base_SetConfig+0x8a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a23      	ldr	r2, [pc, #140]	@ (8004c9c <TIM_Base_SetConfig+0x114>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d108      	bne.n	8004c24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004c84 <TIM_Base_SetConfig+0xfc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d103      	bne.n	8004c58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d105      	bne.n	8004c76 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f023 0201 	bic.w	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	611a      	str	r2, [r3, #16]
  }
}
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40010000 	.word	0x40010000
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	40000800 	.word	0x40000800
 8004c90:	40000c00 	.word	0x40000c00
 8004c94:	40014000 	.word	0x40014000
 8004c98:	40014400 	.word	0x40014400
 8004c9c:	40014800 	.word	0x40014800

08004ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f023 0201 	bic.w	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f023 0302 	bic.w	r3, r3, #2
 8004ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d68 <TIM_OC1_SetConfig+0xc8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d10c      	bne.n	8004d16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0308 	bic.w	r3, r3, #8
 8004d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f023 0304 	bic.w	r3, r3, #4
 8004d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a13      	ldr	r2, [pc, #76]	@ (8004d68 <TIM_OC1_SetConfig+0xc8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d111      	bne.n	8004d42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	621a      	str	r2, [r3, #32]
}
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40010000 	.word	0x40010000

08004d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f023 0210 	bic.w	r2, r3, #16
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f023 0320 	bic.w	r3, r3, #32
 8004db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e40 <TIM_OC2_SetConfig+0xd4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d10d      	bne.n	8004de8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004de6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a15      	ldr	r2, [pc, #84]	@ (8004e40 <TIM_OC2_SetConfig+0xd4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d113      	bne.n	8004e18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40010000 	.word	0x40010000

08004e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0303 	bic.w	r3, r3, #3
 8004e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f14 <TIM_OC3_SetConfig+0xd0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d10d      	bne.n	8004ebe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a14      	ldr	r2, [pc, #80]	@ (8004f14 <TIM_OC3_SetConfig+0xd0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d113      	bne.n	8004eee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	621a      	str	r2, [r3, #32]
}
 8004f08:	bf00      	nop
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	40010000 	.word	0x40010000

08004f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	031b      	lsls	r3, r3, #12
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a10      	ldr	r2, [pc, #64]	@ (8004fb4 <TIM_OC4_SetConfig+0x9c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d109      	bne.n	8004f8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	019b      	lsls	r3, r3, #6
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40010000 	.word	0x40010000

08004fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	f023 0201 	bic.w	r2, r3, #1
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f023 030a 	bic.w	r3, r3, #10
 8004ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005016:	b480      	push	{r7}
 8005018:	b087      	sub	sp, #28
 800501a:	af00      	add	r7, sp, #0
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f023 0210 	bic.w	r2, r3, #16
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005040:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	031b      	lsls	r3, r3, #12
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005052:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005076:	b480      	push	{r7}
 8005078:	b085      	sub	sp, #20
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	f043 0307 	orr.w	r3, r3, #7
 8005098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	609a      	str	r2, [r3, #8]
}
 80050a0:	bf00      	nop
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	021a      	lsls	r2, r3, #8
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	609a      	str	r2, [r3, #8]
}
 80050e0:	bf00      	nop
 80050e2:	371c      	adds	r7, #28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	2201      	movs	r2, #1
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1a      	ldr	r2, [r3, #32]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	43db      	mvns	r3, r3
 800510e:	401a      	ands	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a1a      	ldr	r2, [r3, #32]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	fa01 f303 	lsl.w	r3, r1, r3
 8005124:	431a      	orrs	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800514c:	2302      	movs	r3, #2
 800514e:	e050      	b.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1c      	ldr	r2, [pc, #112]	@ (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d018      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800519c:	d013      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a18      	ldr	r2, [pc, #96]	@ (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00e      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a16      	ldr	r2, [pc, #88]	@ (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d009      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a15      	ldr	r2, [pc, #84]	@ (800520c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d004      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a13      	ldr	r2, [pc, #76]	@ (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d10c      	bne.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40010000 	.word	0x40010000
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40000c00 	.word	0x40000c00
 8005210:	40014000 	.word	0x40014000

08005214 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005214:	b084      	sub	sp, #16
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	f107 001c 	add.w	r0, r7, #28
 8005222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005226:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800522a:	2b01      	cmp	r3, #1
 800522c:	d123      	bne.n	8005276 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005232:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005256:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800525a:	2b01      	cmp	r3, #1
 800525c:	d105      	bne.n	800526a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 faa0 	bl	80057b0 <USB_CoreReset>
 8005270:	4603      	mov	r3, r0
 8005272:	73fb      	strb	r3, [r7, #15]
 8005274:	e01b      	b.n	80052ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fa94 	bl	80057b0 <USB_CoreReset>
 8005288:	4603      	mov	r3, r0
 800528a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800528c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005298:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	639a      	str	r2, [r3, #56]	@ 0x38
 80052a0:	e005      	b.n	80052ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052ae:	7fbb      	ldrb	r3, [r7, #30]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d10b      	bne.n	80052cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f043 0206 	orr.w	r2, r3, #6
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f043 0220 	orr.w	r2, r3, #32
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052d8:	b004      	add	sp, #16
 80052da:	4770      	bx	lr

080052dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f023 0201 	bic.w	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	460b      	mov	r3, r1
 8005308:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d115      	bne.n	800534c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800532c:	200a      	movs	r0, #10
 800532e:	f7fc fd1b 	bl	8001d68 <HAL_Delay>
      ms += 10U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	330a      	adds	r3, #10
 8005336:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fa2b 	bl	8005794 <USB_GetMode>
 800533e:	4603      	mov	r3, r0
 8005340:	2b01      	cmp	r3, #1
 8005342:	d01e      	beq.n	8005382 <USB_SetCurrentMode+0x84>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2bc7      	cmp	r3, #199	@ 0xc7
 8005348:	d9f0      	bls.n	800532c <USB_SetCurrentMode+0x2e>
 800534a:	e01a      	b.n	8005382 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d115      	bne.n	800537e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800535e:	200a      	movs	r0, #10
 8005360:	f7fc fd02 	bl	8001d68 <HAL_Delay>
      ms += 10U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	330a      	adds	r3, #10
 8005368:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa12 	bl	8005794 <USB_GetMode>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <USB_SetCurrentMode+0x84>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2bc7      	cmp	r3, #199	@ 0xc7
 800537a:	d9f0      	bls.n	800535e <USB_SetCurrentMode+0x60>
 800537c:	e001      	b.n	8005382 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e005      	b.n	800538e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2bc8      	cmp	r3, #200	@ 0xc8
 8005386:	d101      	bne.n	800538c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005398:	b084      	sub	sp, #16
 800539a:	b580      	push	{r7, lr}
 800539c:	b086      	sub	sp, #24
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80053a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	e009      	b.n	80053cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	3340      	adds	r3, #64	@ 0x40
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	2200      	movs	r2, #0
 80053c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	3301      	adds	r3, #1
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b0e      	cmp	r3, #14
 80053d0:	d9f2      	bls.n	80053b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11c      	bne.n	8005414 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053e8:	f043 0302 	orr.w	r3, r3, #2
 80053ec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	639a      	str	r2, [r3, #56]	@ 0x38
 8005412:	e00b      	b.n	800542c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005418:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005424:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005432:	461a      	mov	r2, r3
 8005434:	2300      	movs	r3, #0
 8005436:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005438:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800543c:	2b01      	cmp	r3, #1
 800543e:	d10d      	bne.n	800545c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005448:	2100      	movs	r1, #0
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f968 	bl	8005720 <USB_SetDevSpeed>
 8005450:	e008      	b.n	8005464 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005452:	2101      	movs	r1, #1
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f963 	bl	8005720 <USB_SetDevSpeed>
 800545a:	e003      	b.n	8005464 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800545c:	2103      	movs	r1, #3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f95e 	bl	8005720 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005464:	2110      	movs	r1, #16
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f8fa 	bl	8005660 <USB_FlushTxFifo>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f924 	bl	80056c4 <USB_FlushRxFifo>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800548c:	461a      	mov	r2, r3
 800548e:	2300      	movs	r3, #0
 8005490:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005498:	461a      	mov	r2, r3
 800549a:	2300      	movs	r3, #0
 800549c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a4:	461a      	mov	r2, r3
 80054a6:	2300      	movs	r3, #0
 80054a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054aa:	2300      	movs	r3, #0
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	e043      	b.n	8005538 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054c6:	d118      	bne.n	80054fa <USB_DevInit+0x162>
    {
      if (i == 0U)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054da:	461a      	mov	r2, r3
 80054dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e013      	b.n	800550c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f0:	461a      	mov	r2, r3
 80054f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	e008      	b.n	800550c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005506:	461a      	mov	r2, r3
 8005508:	2300      	movs	r3, #0
 800550a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005518:	461a      	mov	r2, r3
 800551a:	2300      	movs	r3, #0
 800551c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800552a:	461a      	mov	r2, r3
 800552c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005530:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	3301      	adds	r3, #1
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800553c:	461a      	mov	r2, r3
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4293      	cmp	r3, r2
 8005542:	d3b5      	bcc.n	80054b0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	e043      	b.n	80055d2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800555c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005560:	d118      	bne.n	8005594 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005574:	461a      	mov	r2, r3
 8005576:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	e013      	b.n	80055a6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558a:	461a      	mov	r2, r3
 800558c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e008      	b.n	80055a6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a0:	461a      	mov	r2, r3
 80055a2:	2300      	movs	r3, #0
 80055a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b2:	461a      	mov	r2, r3
 80055b4:	2300      	movs	r3, #0
 80055b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c4:	461a      	mov	r2, r3
 80055c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	3301      	adds	r3, #1
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055d6:	461a      	mov	r2, r3
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4293      	cmp	r3, r2
 80055dc:	d3b5      	bcc.n	800554a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80055fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005600:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005604:	2b00      	cmp	r3, #0
 8005606:	d105      	bne.n	8005614 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f043 0210 	orr.w	r2, r3, #16
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	4b10      	ldr	r3, [pc, #64]	@ (800565c <USB_DevInit+0x2c4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005620:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f043 0208 	orr.w	r2, r3, #8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005634:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005638:	2b01      	cmp	r3, #1
 800563a:	d107      	bne.n	800564c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005644:	f043 0304 	orr.w	r3, r3, #4
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800564c:	7dfb      	ldrb	r3, [r7, #23]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005658:	b004      	add	sp, #16
 800565a:	4770      	bx	lr
 800565c:	803c3800 	.word	0x803c3800

08005660 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3301      	adds	r3, #1
 8005672:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800567a:	d901      	bls.n	8005680 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e01b      	b.n	80056b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	daf2      	bge.n	800566e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	019b      	lsls	r3, r3, #6
 8005690:	f043 0220 	orr.w	r2, r3, #32
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3301      	adds	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056a4:	d901      	bls.n	80056aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e006      	b.n	80056b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d0f0      	beq.n	8005698 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3301      	adds	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056dc:	d901      	bls.n	80056e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e018      	b.n	8005714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	daf2      	bge.n	80056d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2210      	movs	r2, #16
 80056f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005700:	d901      	bls.n	8005706 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e006      	b.n	8005714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b10      	cmp	r3, #16
 8005710:	d0f0      	beq.n	80056f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005740:	4313      	orrs	r3, r2
 8005742:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800576c:	f023 0303 	bic.w	r3, r3, #3
 8005770:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005780:	f043 0302 	orr.w	r3, r3, #2
 8005784:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	f003 0301 	and.w	r3, r3, #1
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3301      	adds	r3, #1
 80057c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057c8:	d901      	bls.n	80057ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e01b      	b.n	8005806 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	daf2      	bge.n	80057bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f043 0201 	orr.w	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3301      	adds	r3, #1
 80057ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057f2:	d901      	bls.n	80057f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e006      	b.n	8005806 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b01      	cmp	r3, #1
 8005802:	d0f0      	beq.n	80057e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <memset>:
 8005812:	4402      	add	r2, r0
 8005814:	4603      	mov	r3, r0
 8005816:	4293      	cmp	r3, r2
 8005818:	d100      	bne.n	800581c <memset+0xa>
 800581a:	4770      	bx	lr
 800581c:	f803 1b01 	strb.w	r1, [r3], #1
 8005820:	e7f9      	b.n	8005816 <memset+0x4>
	...

08005824 <__libc_init_array>:
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	4d0d      	ldr	r5, [pc, #52]	@ (800585c <__libc_init_array+0x38>)
 8005828:	4c0d      	ldr	r4, [pc, #52]	@ (8005860 <__libc_init_array+0x3c>)
 800582a:	1b64      	subs	r4, r4, r5
 800582c:	10a4      	asrs	r4, r4, #2
 800582e:	2600      	movs	r6, #0
 8005830:	42a6      	cmp	r6, r4
 8005832:	d109      	bne.n	8005848 <__libc_init_array+0x24>
 8005834:	4d0b      	ldr	r5, [pc, #44]	@ (8005864 <__libc_init_array+0x40>)
 8005836:	4c0c      	ldr	r4, [pc, #48]	@ (8005868 <__libc_init_array+0x44>)
 8005838:	f000 f818 	bl	800586c <_init>
 800583c:	1b64      	subs	r4, r4, r5
 800583e:	10a4      	asrs	r4, r4, #2
 8005840:	2600      	movs	r6, #0
 8005842:	42a6      	cmp	r6, r4
 8005844:	d105      	bne.n	8005852 <__libc_init_array+0x2e>
 8005846:	bd70      	pop	{r4, r5, r6, pc}
 8005848:	f855 3b04 	ldr.w	r3, [r5], #4
 800584c:	4798      	blx	r3
 800584e:	3601      	adds	r6, #1
 8005850:	e7ee      	b.n	8005830 <__libc_init_array+0xc>
 8005852:	f855 3b04 	ldr.w	r3, [r5], #4
 8005856:	4798      	blx	r3
 8005858:	3601      	adds	r6, #1
 800585a:	e7f2      	b.n	8005842 <__libc_init_array+0x1e>
 800585c:	080058b8 	.word	0x080058b8
 8005860:	080058b8 	.word	0x080058b8
 8005864:	080058b8 	.word	0x080058b8
 8005868:	080058c0 	.word	0x080058c0

0800586c <_init>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	bf00      	nop
 8005870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005872:	bc08      	pop	{r3}
 8005874:	469e      	mov	lr, r3
 8005876:	4770      	bx	lr

08005878 <_fini>:
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	bf00      	nop
 800587c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587e:	bc08      	pop	{r3}
 8005880:	469e      	mov	lr, r3
 8005882:	4770      	bx	lr
